/*
 Copyright (2017-2019) strike65
 
 GNU GPL 3+
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, version 3 of the License.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */

/*
 Algorithm 838: Airy Functions. ACM Transactions on Mathematical Software, Vol. 30, No. 4, December 2004.
*/

 
/*
 ACM Software License Agreement
 
 All software, both binary and source published by the Association for Computing Machinery (hereafter, Software) is copyrighted by the Association (hereafter, ACM) and ownership of all right, title and interest in and to the Software remains with ACM. By using or copying the Software, User agrees to abide by the terms of this Agreement.
 Noncommercial Use
 
 The ACM grants to you (hereafter, User) a royalty-free, nonexclusive right to execute, copy, modify and distribute both the binary and source code solely for academic, research and other similar noncommercial uses, subject to the following conditions:
 
 User acknowledges that the Software is still in the development stage and that it is being supplied "as is," without any support services from ACM. Neither ACM nor the author makes any representations or warranties, express or implied, including, without limitation, any representations or warranties of the merchantability or fitness for any particular purpose, or that the application of the software, will not infringe on any patents or other proprietary rights of others.
 
 ACM shall not be held liable for direct, indirect, incidental or consequential damages arising from any claim by User or any third party with respect to uses allowed under this Agreement, or from any use of the Software.
 
 User agrees to fully indemnify and hold harmless ACM and/or the author(s) of the original work from and against any and all claims, demands, suits, losses, damages, costs and expenses arising out of the User's use of the Software, including, without limitation, arising out of the User's modification of the Software.
 
 User may modify the Software and distribute that modified work to third parties provided that: (a) if posted separately, it clearly acknowledges that it contains material copyrighted by ACM (b) no charge is associated with such copies, (c) User agrees to notify ACM and the Author(s) of the distribution, and (d) User clearly notifies secondary users that such modified work is not the original Software.
 
 User agrees that ACM, the authors of the original work and others may enjoy a royalty-free, non-exclusive license to use, copy, modify and redistribute these modifications to the Software made by the User and distributed to third parties as a derivative work under this agreement.
 
 This agreement will terminate immediately upon User's breach of, or non-compliance with, any of its terms. User may be held liable for any copyright infringement or the infringement of any other proprietary rights in the Software that is caused or facilitated by the User's failure to abide by the terms of this agreement.
 
 This agreement will be construed and enforced in accordance with the law of the state of New York applicable to contracts performed entirely within the State. The parties irrevocably consent to the exclusive jurisdiction of the state or federal courts located in the City of New York for all disputes concerning this agreement.


 */

/*
 The functionality is ported from a Fortran 90 implementation by FABIJONAS, LOZIER, OLVER: Computation of Complex Airy Functions and Their Zeros Using Asymptotics and the Differential EquationACM Transactions on Mathematical Software, Vol. 30, No. 4, December 2004, Pages 471â€“490.
 The comuptation of the zeros is not implemented. 

 Parts of the original README:
 The functions computed are the Airy functions Ai(z), Ai(x), Bi(x)
 where z is complex and x is real, the derivatives of these func-
 tions, and the auxiliary modulus and phase functions when x is
 negative.
*/
import Foundation

internal struct AiryConstants {
    static let n_coeff_ass: Int = 63
    static let n_coeff_phase: Int = 50
    static let n_coef_zero = 56
    static let m_zeros = 25
}

internal struct AiryVariables<T: SSFloatingPoint> {
    var n_asymp: Int = 0
    var n_asymp_asso: Int = 0
    var n_asymp_mod: Int = 0
    var n_asymp_phase: Int = 0
    var n_asymp_zero: Int = 0
    var n_parts: Int = 0
    var n_parts_aux: Int = 0
    var n_taylor: Int = 0
    var n_taylor_aux: Int = 0
    var aux_min: T = 0
    var fstpsz: T = 0
    var mstpsz: T = 0
    var r_min: T  = 0
    var r_uplimit: T = 0
    var r_lolimit: T = 0
    var theta_global: T
    var xi_global: T
    var x_global: T
    var r_global: T
    var ucoef: Array<T>
    var mcoef: Array<T> = Array<T>.init()
    var ncoef: Array<T> = Array<T>.init()
    var vcoef: Array<T>
    var theta_grid: Array<T>
    
    var big_integrate_aux: Bool
    var is_aux_init_airy: Bool
    var is_init_airy: Bool
    var is_zero_init_airy: Bool
    var arg_local: Bool
    var mod_local: Bool
    init() {
        theta_global = 0
        r_global = 0
        n_asymp_asso = 0
        n_asymp_phase = 0
        n_asymp_zero = 0
        n_parts_aux = 0
        n_taylor_aux = 0
        mstpsz = 0
        is_aux_init_airy = false
        is_zero_init_airy = false
        arg_local = false
        mod_local = false
        theta_grid = Array<T>()
        var ex1: T
        var ex2: T
        var ex3: T
        var ex4: T
        var eta, ifl: T
        var M, i: Int
        var basep: Int
        var e1, e2, e3, e4: T
        switch T.self {
        case is Double.Type:
            M = 53
        case is Float.Type:
            M = 24
            #if arch(i386) || arch(x86_64)
        case is Float80.Type:
            M = 64
            #endif
        default:
            M = 53
        }
        basep = T.radix
        eta = T.ulpOfOne /  Helpers.makeFP(basep)
        r_lolimit = T.ulpOfOne / abs(ai1zer())
        r_uplimit = SSMath.exp1(T.twothirds * SSMath.log1(T.greatestFiniteMagnitude *  Helpers.makeFP(0.95)))
        n_asymp = Helpers.integerValue( Helpers.makeFP(M) * SSMath.log1( Helpers.makeFP(basep)) + T.half)
        ucoef = Array<T>.init(repeating: 0, count: n_asymp)
        vcoef = Array<T>.init(repeating: 0, count: n_asymp)
        ucoef[0] =  Helpers.makeFP(5.0) /  Helpers.makeFP(14.4)
        vcoef[0] = T.minusOne *  Helpers.makeFP(7.0) /  Helpers.makeFP(72.0)
        for i in stride(from: 0, through: n_asymp - 2, by: 1) {
            ifl =  Helpers.makeFP(i + 1)
            e1 = 6 * ifl + 5
            e2 = 6 * ifl + 1
            e3 = e1 * e2 * ucoef[i]
            e4 = ((ifl + 1) * 72)
            ucoef[i + 1] = e3 / e4
            ex1 = 6 * ifl
            ex2 = ex1 + 7
            e1 = -ex2 * ucoef[i + 1]
            e2 = (6 * ifl + 5)
            vcoef[i + 1] = e1 / e2
        }
        var chi: T = T.one
        if n_asymp % 2 == 0 {
            for i in stride(from: 0, to: n_asymp / 2, by: 1) {
                ifl =  Helpers.makeFP(i + 1)
                chi = chi * ifl / (ifl - T.half)
            }
        }
        else {
            chi = T.pihalf
            for i in stride(from: 0, to: (n_asymp - 1) / 2, by: 1) {
                ifl =  Helpers.makeFP(i + 1)
                chi = chi * (ifl + T.half) / ifl
            }
        }
        let Sfloat: T =  Helpers.makeFP(n_asymp)
        var xinew = T.half * Sfloat
        ex1 = Helpers.makeFP(basep)
        ex2 = Helpers.makeFP(M) * SSMath.log1( ex1)
        ex3 = 2 * chi
        ex4 = SSMath.log1(abs(vcoef[n_asymp - 1])) + SSMath.log1(ex3)
        chi =  ex2 + ex4
        fstpsz = 7 * T.pi / 72
        var fun, dfun, xiold: T
        while true {
            xiold = xinew
            ex1 = Sfloat * SSMath.log1(xiold)
            ex2 = fstpsz / xiold
            ex3 = ex1 - ex2
            fun = ex3 - chi
            dfun = Sfloat / xiold + fstpsz / SSMath.pow1(xiold, 2)
            xinew = xiold - fun / dfun
            ex1 = xinew - xiold
            ex2 = abs((ex1) / xinew)
            ex3 = Helpers.makeFP(4) * eta
            if ex2 < ex3 {
                break
            }
        }
        r_min = SSMath.pow1( Helpers.makeFP(1.5) * xinew, T.twothirds)
        n_parts = Helpers.integerValue(ceil(r_min))
        fstpsz = r_min / ceil(r_min)
        var lambda: Array<T> = Array<T>.init(repeating: 0, count: 3)
        lambda[0] = T.one / fstpsz
        lambda[1] = T.one
        lambda[2] = r_min * T.half * fstpsz
        i = 2
        var k: Int
        var l: Int
        var m: Int
        while true {
            i = i + 1
            k = i.remainderReportingOverflow(dividingBy: 3).partialValue
            m = (i - 3).remainderReportingOverflow(dividingBy: 3).partialValue
            l = (i - 2).remainderReportingOverflow(dividingBy: 3).partialValue
            ifl =  Helpers.makeFP(i)
            e1 = r_min * lambda[l] + fstpsz * lambda[m]
            e2 = ifl * (ifl - T.one)
            lambda[k] = e1 / e2 * SSMath.pow1(fstpsz, 2)
            if (ifl * lambda[k]) < (T.half * eta) {
                break
            }
        }
        n_taylor = i
        big_integrate_aux = false
        is_init_airy = true
        xi_global = dbizr()[0]
        x_global = bizr()[0]
        xi_global = daizr()[0]
        x_global = aizr()[0]

//        n_asymp_mod = Helpers.integerValue(T.half * SSMath.log1(2) *  Helpers.makeFP(M) - T.fourth * SSMath.log1( Helpers.makeFP(M)) + T.half)
        //        mcoef = Array<T>.init(repeating: 0, count: n_asymp_mod)
        //        ncoef = Array<T>.init(repeating: 0, count: n_asymp_mod)
        //        mcoef[0] =  Helpers.makeFP("0.15625")
        //        ncoef[0] =  Helpers.makeFP(-1.4) * mcoef[0]
        //        for i in stride(from: 0, to: n_asymp_mod - 1, by: 1) {
        //            ifl =  Helpers.makeFP(i)
        //            e1 = (6 * (ifl + 1) + 5)
        //            e2 = e1 * (6 * (ifl + 1) + 3)
        //            e3 = e2 * (6 * (ifl + 1) + 1)
        //            e4 = (ifl + 2) * 96
        //            e5 = e3 / e4
        //            mcoef[i + 1] = e5 * mcoef[i]
        //            e1 = -(6 * (ifl + 1) + 7)
        //            e2 = (6 * (ifl + 1) + 5)
        //            e3 = e1 / e2 * mcoef[i + 1]
        //            ncoef[i + 1] = e3
        //        }
    }
    var max_step_size: T {
        get {
            return fstpsz
        }
    }
    
    var n_terms_taylor: Int {
        get {
            return n_taylor
        }
    }
    
    var n_terms_asymp: Int {
        get {
            return n_asymp
        }
    }
    var n_partitions: Int {
        get {
            return n_parts
        }
    }
}

internal func ai0zer<T: SSFloatingPoint>() -> T {
    switch T.self {
    case is Float.Type:
        let result = Float(0.35502805388781723926006318600418317639797917419917724058332651030081)
        return result as! T
    case is Double.Type:
        let result = 0.35502805388781723926006318600418317639797917419917724058332651030081
        return result as! T
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = Float80.init(0.35502805388781723926006318600418317639797917419917724058332651030081)
        return result as! T
        #endif
    default:
        let result = 0.35502805388781723926006318600418317639797917419917724058332651030081
        return result as! T
    }
}

internal func ai1zer<T: SSFloatingPoint>() -> T {
    switch T.self {
    case is Float.Type:
        let result = Float(-0.25881940379280679840518356018920396347909113835493458221000181385610)
        return result as! T
    case is Double.Type:
        let result = -0.25881940379280679840518356018920396347909113835493458221000181385610
        return result as! T
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = Float80.init(-0.25881940379280679840518356018920396347909113835493458221000181385610)
        return result as! T
        #endif
    default:
        let result = -0.25881940379280679840518356018920396347909113835493458221000181385610
        return result as! T
    }
}

internal func bi0zer<T: SSFloatingPoint>() -> T {
    switch T.self {
    case is Float.Type:
        let result = Float(0.61492662744600073515092236909361355359472818864859650504087875301430)
        return result as! T
    case is Double.Type:
        let result = 0.61492662744600073515092236909361355359472818864859650504087875301430
        return result as! T
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = Float80.init(0.61492662744600073515092236909361355359472818864859650504087875301430)
        return result as! T
        #endif
    default:
        let result = 0.61492662744600073515092236909361355359472818864859650504087875301430
        return result as! T
    }
}

internal func bi1zer<T: SSFloatingPoint>() -> T {
    switch T.self {
    case is Float.Type:
        let result = Float(0.44828835735382635791482371039882839086622679921226206108280877837233)
        return result as! T
    case is Double.Type:
        let result = 0.44828835735382635791482371039882839086622679921226206108280877837233
        return result as! T
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = Float80.init(0.44828835735382635791482371039882839086622679921226206108280877837233)
        return result as! T
        #endif
    default:
        let result = 0.44828835735382635791482371039882839086622679921226206108280877837233
        return result as! T
    }
}

/*
 not needed yet
 
func Ucoeff<T: SSFloatingPoint>() -> Array<T> {
    let f: Array<Float> = [
        1.0,
        -0.14583333333333333333333333333333333333333333333333333333333333333333,
        0.12152777777777777777777777777777777777777777777777777777777777777777,
        -0.87395351080246913580246913580246913580246913580246913580246913580246,
        0.15016855549125514403292181069958847736625514403292181069958847736625e2,
        -0.47694644148817441754543895747599451303155006858710562414266117969821e3,
        0.24241309444872289030901191917459921575147912596472267254160258275484e5,
        -0.18036569459973376725878994930524510053402371646541742563690437490163e7,
        0.18486906478642827292616911910089915509011302335490721407502386011759e9,
        -0.24975761293716812237485135712074343571689388225751805089702927291450e11,
        0.43010597766029133575957465515041682975116407364519869082404185791498e13,
        -0.91966630646216224414462514444769376815822305958737503992528419520874e15,
        0.23905780559290646307566900546728188233693016653754929837863494781017e18,
        -0.74241332478952472290363916933866251290404112455691659500004579531135e20,
        0.27148400107512125552064168030849313000106437718598339998802868110263e23,
        -0.11546167442336934169526883463106999395192635312191589413884964066192e26,
        0.56509197949692565122879784149625473179282442934941884667921655590141e28,
        -0.31534468131244981806142918984101053489460643574011303209334451335403e31,
        0.19903407540014516438638931066554027629203641348823621813687428803681e34,
        -0.14107259800787276308427861823522682542378736666070937012298625588832e37,
        0.11157559226376058388241181162252207780072675866049674911684381382474e40,
        -0.97911168966451866992095894172730381052056195537079932657057595139361e42,
        0.94842188231979773651687611788221221444304429864017500587580906466991e45,
        -0.10093854348840004363421701540951189641241176805162426458768970023668e49,
        0.11753309898206889209788907835323816047837770192802898892767943766799e52,
        -0.14915259567389695154010536894836306258744098712656167509641682302319e55,
        0.20555467603941926152452307773581023553674196606652536651923229197765e58,
        -0.30664114828091931546036143434946049203640895201650759126568923937596e61,
        0.49366102338787427090349132178175476785656098771026760487567560730389e64,
        -0.85527872283563506905396193884078691515189421163063772903051195883576e67,
        0.15905160493853017875103784933898084128023076207249471188546554365590e71,
        -0.31671480020251898031362069511376069683729168870885141394131419726417e74,
        0.67377747797473203058970344907089937116595231663364594832661747001111e77,
        -0.15281403392070465160928233963603155027184060115379663405333917341838e81,
        0.36876222351784858824732282512073352215729923468181255970009084742092e84,
        -0.94505207024597841792499304832642666053323686278446400296025689886898e87,
        0.25676049507927905036477828913103335013957477586456812093463169718887e91,
        -0.73831918349991133688096513080694039594126308972102658977041222126047e94,
        0.22434873650609465989916612597264280685508533191672309973604370953703e98,
        -0.71932175167133289253941392314260564935469329383000953020665385234810e10,
        0.24301499022274266015249236229059102519443259535429498372071300028184e105,
        -0.86392200099184256673341753224207184715009085434527689795095151266352e108,
        0.32277334408133278730034141082298966934072100188969252542528864933608e112,
        -0.12658410453063860217634140848993855557208179826387248492220322139142e116,
        0.52049980681802453665831970426777630104007284760271492623690409070701e119,
        -0.22415396118038146187210801469410795705798174092757295000371600948203e123,
        0.10099567175653350699936345320055405124203719932677954083892691964047e127,
        -0.47561519985327666244537756889291936086598881976270611582042240452110e130,
        0.23387844301594890965483902208040384641369089913587515033974449393995e134,
        -0.11997993650041033217582177048624365958249639549393416213721216792541e138,
        0.64154920040257821156504337755375966474958297697150253844482194020056e141,
        -0.35726348720185093488728179482093361120107194523287613890849925654197e145,
        0.20703014851226170160468376381877508456518993988984763894602747782221e149,
        -0.12474625649281036421622524359179945285093096496161906265837264044813e153,
        0.78099095291498984417321166641290057395110783507772223491883388065302e156,
        -0.50766451666920499286704685800242398987056663490773056939748373429556e160]
    let d: Array<Double> = [
        1.0,
        -0.14583333333333333333333333333333333333333333333333333333333333333333,
        0.12152777777777777777777777777777777777777777777777777777777777777777,
        -0.87395351080246913580246913580246913580246913580246913580246913580246,
        0.15016855549125514403292181069958847736625514403292181069958847736625e2,
        -0.47694644148817441754543895747599451303155006858710562414266117969821e3,
        0.24241309444872289030901191917459921575147912596472267254160258275484e5,
        -0.18036569459973376725878994930524510053402371646541742563690437490163e7,
        0.18486906478642827292616911910089915509011302335490721407502386011759e9,
        -0.24975761293716812237485135712074343571689388225751805089702927291450e11,
        0.43010597766029133575957465515041682975116407364519869082404185791498e13,
        -0.91966630646216224414462514444769376815822305958737503992528419520874e15,
        0.23905780559290646307566900546728188233693016653754929837863494781017e18,
        -0.74241332478952472290363916933866251290404112455691659500004579531135e20,
        0.27148400107512125552064168030849313000106437718598339998802868110263e23,
        -0.11546167442336934169526883463106999395192635312191589413884964066192e26,
        0.56509197949692565122879784149625473179282442934941884667921655590141e28,
        -0.31534468131244981806142918984101053489460643574011303209334451335403e31,
        0.19903407540014516438638931066554027629203641348823621813687428803681e34,
        -0.14107259800787276308427861823522682542378736666070937012298625588832e37,
        0.11157559226376058388241181162252207780072675866049674911684381382474e40,
        -0.97911168966451866992095894172730381052056195537079932657057595139361e42,
        0.94842188231979773651687611788221221444304429864017500587580906466991e45,
        -0.10093854348840004363421701540951189641241176805162426458768970023668e49,
        0.11753309898206889209788907835323816047837770192802898892767943766799e52,
        -0.14915259567389695154010536894836306258744098712656167509641682302319e55,
        0.20555467603941926152452307773581023553674196606652536651923229197765e58,
        -0.30664114828091931546036143434946049203640895201650759126568923937596e61,
        0.49366102338787427090349132178175476785656098771026760487567560730389e64,
        -0.85527872283563506905396193884078691515189421163063772903051195883576e67,
        0.15905160493853017875103784933898084128023076207249471188546554365590e71,
        -0.31671480020251898031362069511376069683729168870885141394131419726417e74,
        0.67377747797473203058970344907089937116595231663364594832661747001111e77,
        -0.15281403392070465160928233963603155027184060115379663405333917341838e81,
        0.36876222351784858824732282512073352215729923468181255970009084742092e84,
        -0.94505207024597841792499304832642666053323686278446400296025689886898e87,
        0.25676049507927905036477828913103335013957477586456812093463169718887e91,
        -0.73831918349991133688096513080694039594126308972102658977041222126047e94,
        0.22434873650609465989916612597264280685508533191672309973604370953703e98,
        -0.71932175167133289253941392314260564935469329383000953020665385234810e10,
        0.24301499022274266015249236229059102519443259535429498372071300028184e105,
        -0.86392200099184256673341753224207184715009085434527689795095151266352e108,
        0.32277334408133278730034141082298966934072100188969252542528864933608e112,
        -0.12658410453063860217634140848993855557208179826387248492220322139142e116,
        0.52049980681802453665831970426777630104007284760271492623690409070701e119,
        -0.22415396118038146187210801469410795705798174092757295000371600948203e123,
        0.10099567175653350699936345320055405124203719932677954083892691964047e127,
        -0.47561519985327666244537756889291936086598881976270611582042240452110e130,
        0.23387844301594890965483902208040384641369089913587515033974449393995e134,
        -0.11997993650041033217582177048624365958249639549393416213721216792541e138,
        0.64154920040257821156504337755375966474958297697150253844482194020056e141,
        -0.35726348720185093488728179482093361120107194523287613890849925654197e145,
        0.20703014851226170160468376381877508456518993988984763894602747782221e149,
        -0.12474625649281036421622524359179945285093096496161906265837264044813e153,
        0.78099095291498984417321166641290057395110783507772223491883388065302e156,
        -0.50766451666920499286704685800242398987056663490773056939748373429556e160]
    #if arch(i386) || arch(x86_64)

    let l: Array<Float80> = [
        1.0,
        -0.14583333333333333333333333333333333333333333333333333333333333333333,
        0.12152777777777777777777777777777777777777777777777777777777777777777,
        -0.87395351080246913580246913580246913580246913580246913580246913580246,
        0.15016855549125514403292181069958847736625514403292181069958847736625e2,
        -0.47694644148817441754543895747599451303155006858710562414266117969821e3,
        0.24241309444872289030901191917459921575147912596472267254160258275484e5,
        -0.18036569459973376725878994930524510053402371646541742563690437490163e7,
        0.18486906478642827292616911910089915509011302335490721407502386011759e9,
        -0.24975761293716812237485135712074343571689388225751805089702927291450e11,
        0.43010597766029133575957465515041682975116407364519869082404185791498e13,
        -0.91966630646216224414462514444769376815822305958737503992528419520874e15,
        0.23905780559290646307566900546728188233693016653754929837863494781017e18,
        -0.74241332478952472290363916933866251290404112455691659500004579531135e20,
        0.27148400107512125552064168030849313000106437718598339998802868110263e23,
        -0.11546167442336934169526883463106999395192635312191589413884964066192e26,
        0.56509197949692565122879784149625473179282442934941884667921655590141e28,
        -0.31534468131244981806142918984101053489460643574011303209334451335403e31,
        0.19903407540014516438638931066554027629203641348823621813687428803681e34,
        -0.14107259800787276308427861823522682542378736666070937012298625588832e37,
        0.11157559226376058388241181162252207780072675866049674911684381382474e40,
        -0.97911168966451866992095894172730381052056195537079932657057595139361e42,
        0.94842188231979773651687611788221221444304429864017500587580906466991e45,
        -0.10093854348840004363421701540951189641241176805162426458768970023668e49,
        0.11753309898206889209788907835323816047837770192802898892767943766799e52,
        -0.14915259567389695154010536894836306258744098712656167509641682302319e55,
        0.20555467603941926152452307773581023553674196606652536651923229197765e58,
        -0.30664114828091931546036143434946049203640895201650759126568923937596e61,
        0.49366102338787427090349132178175476785656098771026760487567560730389e64,
        -0.85527872283563506905396193884078691515189421163063772903051195883576e67,
        0.15905160493853017875103784933898084128023076207249471188546554365590e71,
        -0.31671480020251898031362069511376069683729168870885141394131419726417e74,
        0.67377747797473203058970344907089937116595231663364594832661747001111e77,
        -0.15281403392070465160928233963603155027184060115379663405333917341838e81,
        0.36876222351784858824732282512073352215729923468181255970009084742092e84,
        -0.94505207024597841792499304832642666053323686278446400296025689886898e87,
        0.25676049507927905036477828913103335013957477586456812093463169718887e91,
        -0.73831918349991133688096513080694039594126308972102658977041222126047e94,
        0.22434873650609465989916612597264280685508533191672309973604370953703e98,
        -0.71932175167133289253941392314260564935469329383000953020665385234810e10,
        0.24301499022274266015249236229059102519443259535429498372071300028184e105,
        -0.86392200099184256673341753224207184715009085434527689795095151266352e108,
        0.32277334408133278730034141082298966934072100188969252542528864933608e112,
        -0.12658410453063860217634140848993855557208179826387248492220322139142e116,
        0.52049980681802453665831970426777630104007284760271492623690409070701e119,
        -0.22415396118038146187210801469410795705798174092757295000371600948203e123,
        0.10099567175653350699936345320055405124203719932677954083892691964047e127,
        -0.47561519985327666244537756889291936086598881976270611582042240452110e130,
        0.23387844301594890965483902208040384641369089913587515033974449393995e134,
        -0.11997993650041033217582177048624365958249639549393416213721216792541e138,
        0.64154920040257821156504337755375966474958297697150253844482194020056e141,
        -0.35726348720185093488728179482093361120107194523287613890849925654197e145,
        0.20703014851226170160468376381877508456518993988984763894602747782221e149,
        -0.12474625649281036421622524359179945285093096496161906265837264044813e153,
        0.78099095291498984417321166641290057395110783507772223491883388065302e156,
        -0.50766451666920499286704685800242398987056663490773056939748373429556e160]
    #endif
    switch T.self {
    case is Float.Type:
        let result = f as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = d as Array<Double>
        return result as! Array<T>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = l as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        let result = d as Array<Double>
        return result as! Array<T>
    }
}

func Tcoeff<T: SSFloatingPoint>() -> Array<T> {
    let f: Array<Float> = [
        1.0,
        0.10416666666666666666666666666666666666666666666666666666666666666667,
        -0.13888888888888888888888888888888888888888888888888888888888888888889,
        0.92984423225308641975308641975308641975308641975308641975308641975309,
        -0.15509155201673647854203409758965314520870076425631981187536743092299e2,
        0.48552909692595711928032529884381736233588085439937291789143640995492e3,
        -0.24505300371559153682986228639520820590779438516064030467322648392607e5,
        0.18166531815056219864955679723943719999961426573223555390907928630837e7,
        -0.18581460679897715056836004159090076815148668306941218300549412966945e9,
        0.25071304911268777333357715167823935456935326637881744159381973639923e11,
        -0.43138527109842934644759345584413150635257003381911139923300864298731e13,
        0.92185668129464141695987363212833552615161591992359885620965411318628e15,
        -0.23952433840095928791094332571942871169658682388152814639232211028922e18,
        0.74362270472474507345398633000288750016206828627391077277289564070702e20,
        -0.27185882859962273722339835257780075234211548224517714800753203346127e23,
        0.11559853167916871386933427721989223661195069934160109595184381087791e26,
        -0.56567334133206565368102758661503886004417965273912945973100005362259e28,
        0.31562894324838583270281305634852764403638314020995636590825013151460e31,
        -0.19919258451508720424348231287353840437868650493382105342718540790297e34,
        0.14117258064737679737776630556275250408926431644493704674703400857145e37,
        -0.11164642174072109561223350471691552374391433806310651183802082896951e40,
        0.97967164158278846547438620160557824503041359438794841332630872374930e42,
        -0.94891307580284755277548004980034901717550001626170852847573583227890e45,
        0.10098610809248076249074036492916612325284053264374591096020664351942e49,
        -0.11758370710196329175686452122768747739546685071872150784191369967919e52,
        0.14921150984686502643918601323682722977762625135098393735932060011458e55,
        -0.20562942407939128973788970107145954697239949579275764596681522368340e58,
        0.30674414339703027984557756338766648623061371604751170077497853041336e61,
        -0.49381464389065703514414376124090604029319195122151949195423702788440e64,
        0.85552600050674514166037335169011816701693895322935495541549028524886e67,
        -0.15909444082473299698105131270096108507658923102224119263418369560478e71,
        0.31679445060129872330154447996576899972397808928310935503731008478804e74,
        -0.67393606698205551356590737775952562838503676308476217226185171949385e77,
        0.15284776889635128629958626667274826956672953066901360901017230535376e81,
        -0.36883872857780404454641197328305961049114361355619869034021470060729e84,
        0.94523667365207400774723728448041810267457304315127521834562030560915e87,
        -0.25680780131046747934900503749660107326570832650658319996932836021029e91,
        0.73844770114739079149892403045167309500572883020991309765436811625919e84,
        -0.22438568978657876605574244940414470180612253866038210914591946322219e98,
        0.71943403333451861202742470176857110279884665218133554269689930563214e101,
        -0.24305098890695512130164302767376074435501301582956470312823055101950e105,
        0.86404361298136368246708141865214768397985490481404698406775721925269e108,
        -0.32281657547773530130641638261260703492461229074644634987917760718557e112,
        0.12660025574379689825390757955090645221822260387369027230864689425729e116,
        -0.52056314573696814753098687759946586496965657569199355992702143018080e119,
        0.22418000454826808504041968248387029081392043348043423531235015542335e123,
        -0.10100688701029413642642584650224102377826199264338678362250408468416e127,
        0.47566573022411084112382308739209248802018314978025349360661979655957e130,
        -0.23390223843342824573557767032239217008469637672278461668515561594488e134,
        0.11999163732445825923983675048550329573712483824248289866948173690662e138,
        -0.64160922430691576929378390179082298613977749760199117434017886679318e141,
        0.35729558206957913592353331316564747010295288658097259740502832900235e145,
        -0.20704802099398561273399136516817367415999088767761277008018247421227e149,
        0.12475661318287886645565405796047851203309187211403798809514130671614e153,
        -0.78105335607384790780096263667849118744101236336911720704817696289821e156,
        0.50770358431057167077679014158662551964839528596933932658427521736419e160]
    
    let d: Array<Double> = [
        1.0,
        0.10416666666666666666666666666666666666666666666666666666666666666667,
        -0.13888888888888888888888888888888888888888888888888888888888888888889,
        0.92984423225308641975308641975308641975308641975308641975308641975309,
        -0.15509155201673647854203409758965314520870076425631981187536743092299e2,
        0.48552909692595711928032529884381736233588085439937291789143640995492e3,
        -0.24505300371559153682986228639520820590779438516064030467322648392607e5,
        0.18166531815056219864955679723943719999961426573223555390907928630837e7,
        -0.18581460679897715056836004159090076815148668306941218300549412966945e9,
        0.25071304911268777333357715167823935456935326637881744159381973639923e11,
        -0.43138527109842934644759345584413150635257003381911139923300864298731e13,
        0.92185668129464141695987363212833552615161591992359885620965411318628e15,
        -0.23952433840095928791094332571942871169658682388152814639232211028922e18,
        0.74362270472474507345398633000288750016206828627391077277289564070702e20,
        -0.27185882859962273722339835257780075234211548224517714800753203346127e23,
        0.11559853167916871386933427721989223661195069934160109595184381087791e26,
        -0.56567334133206565368102758661503886004417965273912945973100005362259e28,
        0.31562894324838583270281305634852764403638314020995636590825013151460e31,
        -0.19919258451508720424348231287353840437868650493382105342718540790297e34,
        0.14117258064737679737776630556275250408926431644493704674703400857145e37,
        -0.11164642174072109561223350471691552374391433806310651183802082896951e40,
        0.97967164158278846547438620160557824503041359438794841332630872374930e42,
        -0.94891307580284755277548004980034901717550001626170852847573583227890e45,
        0.10098610809248076249074036492916612325284053264374591096020664351942e49,
        -0.11758370710196329175686452122768747739546685071872150784191369967919e52,
        0.14921150984686502643918601323682722977762625135098393735932060011458e55,
        -0.20562942407939128973788970107145954697239949579275764596681522368340e58,
        0.30674414339703027984557756338766648623061371604751170077497853041336e61,
        -0.49381464389065703514414376124090604029319195122151949195423702788440e64,
        0.85552600050674514166037335169011816701693895322935495541549028524886e67,
        -0.15909444082473299698105131270096108507658923102224119263418369560478e71,
        0.31679445060129872330154447996576899972397808928310935503731008478804e74,
        -0.67393606698205551356590737775952562838503676308476217226185171949385e77,
        0.15284776889635128629958626667274826956672953066901360901017230535376e81,
        -0.36883872857780404454641197328305961049114361355619869034021470060729e84,
        0.94523667365207400774723728448041810267457304315127521834562030560915e87,
        -0.25680780131046747934900503749660107326570832650658319996932836021029e91,
        0.73844770114739079149892403045167309500572883020991309765436811625919e84,
        -0.22438568978657876605574244940414470180612253866038210914591946322219e98,
        0.71943403333451861202742470176857110279884665218133554269689930563214e101,
        -0.24305098890695512130164302767376074435501301582956470312823055101950e105,
        0.86404361298136368246708141865214768397985490481404698406775721925269e108,
        -0.32281657547773530130641638261260703492461229074644634987917760718557e112,
        0.12660025574379689825390757955090645221822260387369027230864689425729e116,
        -0.52056314573696814753098687759946586496965657569199355992702143018080e119,
        0.22418000454826808504041968248387029081392043348043423531235015542335e123,
        -0.10100688701029413642642584650224102377826199264338678362250408468416e127,
        0.47566573022411084112382308739209248802018314978025349360661979655957e130,
        -0.23390223843342824573557767032239217008469637672278461668515561594488e134,
        0.11999163732445825923983675048550329573712483824248289866948173690662e138,
        -0.64160922430691576929378390179082298613977749760199117434017886679318e141,
        0.35729558206957913592353331316564747010295288658097259740502832900235e145,
        -0.20704802099398561273399136516817367415999088767761277008018247421227e149,
        0.12475661318287886645565405796047851203309187211403798809514130671614e153,
        -0.78105335607384790780096263667849118744101236336911720704817696289821e156,
        0.50770358431057167077679014158662551964839528596933932658427521736419e160]
    #if arch(i386) || arch(x86_64)
    let l: Array<Float80> = [
        1.0,
        0.10416666666666666666666666666666666666666666666666666666666666666667,
        -0.13888888888888888888888888888888888888888888888888888888888888888889,
        0.92984423225308641975308641975308641975308641975308641975308641975309,
        -0.15509155201673647854203409758965314520870076425631981187536743092299e2,
        0.48552909692595711928032529884381736233588085439937291789143640995492e3,
        -0.24505300371559153682986228639520820590779438516064030467322648392607e5,
        0.18166531815056219864955679723943719999961426573223555390907928630837e7,
        -0.18581460679897715056836004159090076815148668306941218300549412966945e9,
        0.25071304911268777333357715167823935456935326637881744159381973639923e11,
        -0.43138527109842934644759345584413150635257003381911139923300864298731e13,
        0.92185668129464141695987363212833552615161591992359885620965411318628e15,
        -0.23952433840095928791094332571942871169658682388152814639232211028922e18,
        0.74362270472474507345398633000288750016206828627391077277289564070702e20,
        -0.27185882859962273722339835257780075234211548224517714800753203346127e23,
        0.11559853167916871386933427721989223661195069934160109595184381087791e26,
        -0.56567334133206565368102758661503886004417965273912945973100005362259e28,
        0.31562894324838583270281305634852764403638314020995636590825013151460e31,
        -0.19919258451508720424348231287353840437868650493382105342718540790297e34,
        0.14117258064737679737776630556275250408926431644493704674703400857145e37,
        -0.11164642174072109561223350471691552374391433806310651183802082896951e40,
        0.97967164158278846547438620160557824503041359438794841332630872374930e42,
        -0.94891307580284755277548004980034901717550001626170852847573583227890e45,
        0.10098610809248076249074036492916612325284053264374591096020664351942e49,
        -0.11758370710196329175686452122768747739546685071872150784191369967919e52,
        0.14921150984686502643918601323682722977762625135098393735932060011458e55,
        -0.20562942407939128973788970107145954697239949579275764596681522368340e58,
        0.30674414339703027984557756338766648623061371604751170077497853041336e61,
        -0.49381464389065703514414376124090604029319195122151949195423702788440e64,
        0.85552600050674514166037335169011816701693895322935495541549028524886e67,
        -0.15909444082473299698105131270096108507658923102224119263418369560478e71,
        0.31679445060129872330154447996576899972397808928310935503731008478804e74,
        -0.67393606698205551356590737775952562838503676308476217226185171949385e77,
        0.15284776889635128629958626667274826956672953066901360901017230535376e81,
        -0.36883872857780404454641197328305961049114361355619869034021470060729e84,
        0.94523667365207400774723728448041810267457304315127521834562030560915e87,
        -0.25680780131046747934900503749660107326570832650658319996932836021029e91,
        0.73844770114739079149892403045167309500572883020991309765436811625919e84,
        -0.22438568978657876605574244940414470180612253866038210914591946322219e98,
        0.71943403333451861202742470176857110279884665218133554269689930563214e101,
        -0.24305098890695512130164302767376074435501301582956470312823055101950e105,
        0.86404361298136368246708141865214768397985490481404698406775721925269e108,
        -0.32281657547773530130641638261260703492461229074644634987917760718557e112,
        0.12660025574379689825390757955090645221822260387369027230864689425729e116,
        -0.52056314573696814753098687759946586496965657569199355992702143018080e119,
        0.22418000454826808504041968248387029081392043348043423531235015542335e123,
        -0.10100688701029413642642584650224102377826199264338678362250408468416e127,
        0.47566573022411084112382308739209248802018314978025349360661979655957e130,
        -0.23390223843342824573557767032239217008469637672278461668515561594488e134,
        0.11999163732445825923983675048550329573712483824248289866948173690662e138,
        -0.64160922430691576929378390179082298613977749760199117434017886679318e141,
        0.35729558206957913592353331316564747010295288658097259740502832900235e145,
        -0.20704802099398561273399136516817367415999088767761277008018247421227e149,
        0.12475661318287886645565405796047851203309187211403798809514130671614e153,
        -0.78105335607384790780096263667849118744101236336911720704817696289821e156,
        0.50770358431057167077679014158662551964839528596933932658427521736419e160]
    #endif
    switch T.self {
    case is Float.Type:
        let result = f as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = d as Array<Double>
        return result as! Array<T>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = l as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        let result = d as Array<Double>
        return result as! Array<T>
    }
}

func Wcoeff<T: SSFloatingPoint>() -> Array<T> {
    let f: Array<Float> = [
    -0.07291666666666666666666666666666666666666666666666666666666666666667,
    0.27229817708333333333333333333333333333333333333333333333333333333333,
    -0.31796569447458526234567901234567901234567901234567901234567901234568e1,
    0.76556611494861021944524819958847736625514403292181069958847736625514e2,
    -0.31342883391504333097748305081340020576131687242798353909465020576132e4,
    0.19526467547467580356141263657907492119681468318299594019758628812127e6,
    -0.17214881804894471760366662537203599796978117784592300195866725359181e8,
    0.20404480428776782808583230846549783277836178166084920127306154826731e10,
    -0.31299949629291202854512623939968839596125044797653615695230422712467e12,
    0.60336461605090016658418262949946148185490712235984520011916410419179e14,
    -0.14278069090774911120088839828530748584551695465524445535742732768897e17,
    0.40694463078143798287130215270391777070050987066122969894115089940327e19,
    -0.13750138163790283482202930118673116996392571046076704729266812849012e22,
    0.54348926796785052801475752640893088472995254326308568359735532603746e24,
    -0.24844792999331365214998636162748338476863223103457160185005725731021e27,
    0.13006474905307843236575513358891917058326565765494198896278465517184e30,
    -0.77308324290748324739057865230742197678773712235823741470353250780808e32,
    0.51777850299807518173142784385934789871927480162907991284189078357799e35,
    -0.38814345591742149734668498349356519681026833217761869126091260492675e38,
    0.32371427083820730592997422984643403177773522701009254386004811466743e41,
    -0.29874986827080478884190074254990568828103267869569100228461781316986e44,
    0.30360634740053951327896972827621158563037858664706363711081949353786e47,
    -0.33825714675286665024140203614169399088635995626398761088900799825628e50,
    0.41149164273551406585781481488408987782456057258383260258549416260778e53,
    -0.54455986340331835374641221522823255837698570580066433295851004024933e56,
    0.78130992767230544018414009790655958914552920815980627216875258213508e59,
    -0.12115223587091684946329431505204521385450149548831782255139272257958e63,
    0.20244592837085139181461609232296606192823980799932370000660702095961e66,
    -0.36356845070938164932191419587043625426144667669878108642458711480165e69,
    0.69996165929353579451877926547331080690884165497387913985052720353445e72,
    -0.14413113297034043325245482652689576895508908029906780419542674771067e76,
    0.31672871590345335266091698496695051388432534498125701861139662564097e79,
    -0.74126513717880415662859852045921163300483589588651650409246140259593e82,
    0.18440849873059519808034797163033300858530685710495395519130980839380e86,
    -0.48676991919685415796644648701954794143568660492618142404503177084697e89,
    0.13610103187692986437476716347372662183718353515873683134697916324211e93,
    -0.40243417887979252089715153133466607795716506887314640636278752867259e96,
    0.12565013777935480241848586316006283152879014921176384532124033031005e100,
    -0.41365634264582272778566733965611481020861148242111761647744907714320e103,
    0.14339409364180527062863367710702909293538014155644831937447023847458e107,
        -0.52272565695840736902310970199322716034896043916911897826711471370477e110,
        0.20013873237902089546233112757343855340672136637249651667006730957441e114,
        -0.80388278212226250229539050402383177921686252031963455625680997914909e117,
        0.33835447680016009318131920319518924659697918603232614321420856900811e121,
        -0.14907484080694089485057416124301611758212349344388791192461825578970e125,
        0.68682543761177567812666841466566465804229617540851105036999084022986e128,
        -0.33057783816698691465421284889296141763433202701355488119536813033424e132,
        0.16606585680890010392955925191610451146159841700201344759512414035539e136,
        -0.86991562451838247539863941467506400498257953847383079314747693710280e139,
        0.47477840071035479070316437198311566899770847203711441099978992848440e143,
        -0.26975139028563609163677868450212082245025416175786556168506457211935e147,
        0.15942313127360607223331447173078019238938649855332049699892015189284e151,
        -0.97931671254977175938624414519464954227804198086876729834671618925574e154,
        0.62482875317012139806026314897328136965964374299906322451833626941862e158,
        -0.41376954055676364528233672305143910272597687609280824732944653664345e162,
        0.28419769324142769069351633035666203091678626692459848096036450446153e166,
        -0.20233105203250752333992061204250782338499709868648694329341733953856e170,
        0.14921413227682859768600979116852113769192082397308681022730906838764e174,
        -0.11391942318647607278195227387147815982946299255584776067390546283266e178,
        0.89984973907118798973274600559964730505886269200285584307716001979151e181,
        -0.73498618581016154263237896162942608870795994021129309881094563967910e185,
        0.62042034816474031028845699860660079271705962703651243271640215253005e189]
    
    let d: Array<Double> = [
        -0.07291666666666666666666666666666666666666666666666666666666666666667,
        0.27229817708333333333333333333333333333333333333333333333333333333333,
        -0.31796569447458526234567901234567901234567901234567901234567901234568e1,
        0.76556611494861021944524819958847736625514403292181069958847736625514e2,
        -0.31342883391504333097748305081340020576131687242798353909465020576132e4,
        0.19526467547467580356141263657907492119681468318299594019758628812127e6,
        -0.17214881804894471760366662537203599796978117784592300195866725359181e8,
        0.20404480428776782808583230846549783277836178166084920127306154826731e10,
        -0.31299949629291202854512623939968839596125044797653615695230422712467e12,
        0.60336461605090016658418262949946148185490712235984520011916410419179e14,
        -0.14278069090774911120088839828530748584551695465524445535742732768897e17,
        0.40694463078143798287130215270391777070050987066122969894115089940327e19,
        -0.13750138163790283482202930118673116996392571046076704729266812849012e22,
        0.54348926796785052801475752640893088472995254326308568359735532603746e24,
        -0.24844792999331365214998636162748338476863223103457160185005725731021e27,
        0.13006474905307843236575513358891917058326565765494198896278465517184e30,
        -0.77308324290748324739057865230742197678773712235823741470353250780808e32,
        0.51777850299807518173142784385934789871927480162907991284189078357799e35,
        -0.38814345591742149734668498349356519681026833217761869126091260492675e38,
        0.32371427083820730592997422984643403177773522701009254386004811466743e41,
        -0.29874986827080478884190074254990568828103267869569100228461781316986e44,
        0.30360634740053951327896972827621158563037858664706363711081949353786e47,
        -0.33825714675286665024140203614169399088635995626398761088900799825628e50,
        0.41149164273551406585781481488408987782456057258383260258549416260778e53,
        -0.54455986340331835374641221522823255837698570580066433295851004024933e56,
        0.78130992767230544018414009790655958914552920815980627216875258213508e59,
        -0.12115223587091684946329431505204521385450149548831782255139272257958e63,
        0.20244592837085139181461609232296606192823980799932370000660702095961e66,
        -0.36356845070938164932191419587043625426144667669878108642458711480165e69,
        0.69996165929353579451877926547331080690884165497387913985052720353445e72,
        -0.14413113297034043325245482652689576895508908029906780419542674771067e76,
        0.31672871590345335266091698496695051388432534498125701861139662564097e79,
        -0.74126513717880415662859852045921163300483589588651650409246140259593e82,
        0.18440849873059519808034797163033300858530685710495395519130980839380e86,
        -0.48676991919685415796644648701954794143568660492618142404503177084697e89,
        0.13610103187692986437476716347372662183718353515873683134697916324211e93,
        -0.40243417887979252089715153133466607795716506887314640636278752867259e96,
        0.12565013777935480241848586316006283152879014921176384532124033031005e100,
        -0.41365634264582272778566733965611481020861148242111761647744907714320e103,
        0.14339409364180527062863367710702909293538014155644831937447023847458e107,
        -0.52272565695840736902310970199322716034896043916911897826711471370477e110,
        0.20013873237902089546233112757343855340672136637249651667006730957441e114,
        -0.80388278212226250229539050402383177921686252031963455625680997914909e117,
        0.33835447680016009318131920319518924659697918603232614321420856900811e121,
        -0.14907484080694089485057416124301611758212349344388791192461825578970e125,
        0.68682543761177567812666841466566465804229617540851105036999084022986e128,
        -0.33057783816698691465421284889296141763433202701355488119536813033424e132,
        0.16606585680890010392955925191610451146159841700201344759512414035539e136,
        -0.86991562451838247539863941467506400498257953847383079314747693710280e139,
        0.47477840071035479070316437198311566899770847203711441099978992848440e143,
        -0.26975139028563609163677868450212082245025416175786556168506457211935e147,
        0.15942313127360607223331447173078019238938649855332049699892015189284e151,
        -0.97931671254977175938624414519464954227804198086876729834671618925574e154,
        0.62482875317012139806026314897328136965964374299906322451833626941862e158,
        -0.41376954055676364528233672305143910272597687609280824732944653664345e162,
        0.28419769324142769069351633035666203091678626692459848096036450446153e166,
        -0.20233105203250752333992061204250782338499709868648694329341733953856e170,
        0.14921413227682859768600979116852113769192082397308681022730906838764e174,
        -0.11391942318647607278195227387147815982946299255584776067390546283266e178,
        0.89984973907118798973274600559964730505886269200285584307716001979151e181,
        -0.73498618581016154263237896162942608870795994021129309881094563967910e185,
        0.62042034816474031028845699860660079271705962703651243271640215253005e189]
    #if arch(i386) || arch(x86_64)
    
    let l: Array<Float80> = [
        -0.07291666666666666666666666666666666666666666666666666666666666666667,
        0.27229817708333333333333333333333333333333333333333333333333333333333,
        -0.31796569447458526234567901234567901234567901234567901234567901234568e1,
        0.76556611494861021944524819958847736625514403292181069958847736625514e2,
        -0.31342883391504333097748305081340020576131687242798353909465020576132e4,
        0.19526467547467580356141263657907492119681468318299594019758628812127e6,
        -0.17214881804894471760366662537203599796978117784592300195866725359181e8,
        0.20404480428776782808583230846549783277836178166084920127306154826731e10,
        -0.31299949629291202854512623939968839596125044797653615695230422712467e12,
        0.60336461605090016658418262949946148185490712235984520011916410419179e14,
        -0.14278069090774911120088839828530748584551695465524445535742732768897e17,
        0.40694463078143798287130215270391777070050987066122969894115089940327e19,
        -0.13750138163790283482202930118673116996392571046076704729266812849012e22,
        0.54348926796785052801475752640893088472995254326308568359735532603746e24,
        -0.24844792999331365214998636162748338476863223103457160185005725731021e27,
        0.13006474905307843236575513358891917058326565765494198896278465517184e30,
        -0.77308324290748324739057865230742197678773712235823741470353250780808e32,
        0.51777850299807518173142784385934789871927480162907991284189078357799e35,
        -0.38814345591742149734668498349356519681026833217761869126091260492675e38,
        0.32371427083820730592997422984643403177773522701009254386004811466743e41,
        -0.29874986827080478884190074254990568828103267869569100228461781316986e44,
        0.30360634740053951327896972827621158563037858664706363711081949353786e47,
        -0.33825714675286665024140203614169399088635995626398761088900799825628e50,
        0.41149164273551406585781481488408987782456057258383260258549416260778e53,
        -0.54455986340331835374641221522823255837698570580066433295851004024933e56,
        0.78130992767230544018414009790655958914552920815980627216875258213508e59,
        -0.12115223587091684946329431505204521385450149548831782255139272257958e63,
        0.20244592837085139181461609232296606192823980799932370000660702095961e66,
        -0.36356845070938164932191419587043625426144667669878108642458711480165e69,
        0.69996165929353579451877926547331080690884165497387913985052720353445e72,
        -0.14413113297034043325245482652689576895508908029906780419542674771067e76,
        0.31672871590345335266091698496695051388432534498125701861139662564097e79,
        -0.74126513717880415662859852045921163300483589588651650409246140259593e82,
        0.18440849873059519808034797163033300858530685710495395519130980839380e86,
        -0.48676991919685415796644648701954794143568660492618142404503177084697e89,
        0.13610103187692986437476716347372662183718353515873683134697916324211e93,
        -0.40243417887979252089715153133466607795716506887314640636278752867259e96,
        0.12565013777935480241848586316006283152879014921176384532124033031005e100,
        -0.41365634264582272778566733965611481020861148242111761647744907714320e103,
        0.14339409364180527062863367710702909293538014155644831937447023847458e107,
        -0.52272565695840736902310970199322716034896043916911897826711471370477e110,
        0.20013873237902089546233112757343855340672136637249651667006730957441e114,
        -0.80388278212226250229539050402383177921686252031963455625680997914909e117,
        0.33835447680016009318131920319518924659697918603232614321420856900811e121,
        -0.14907484080694089485057416124301611758212349344388791192461825578970e125,
        0.68682543761177567812666841466566465804229617540851105036999084022986e128,
        -0.33057783816698691465421284889296141763433202701355488119536813033424e132,
        0.16606585680890010392955925191610451146159841700201344759512414035539e136,
        -0.86991562451838247539863941467506400498257953847383079314747693710280e139,
        0.47477840071035479070316437198311566899770847203711441099978992848440e143,
        -0.26975139028563609163677868450212082245025416175786556168506457211935e147,
        0.15942313127360607223331447173078019238938649855332049699892015189284e151,
        -0.97931671254977175938624414519464954227804198086876729834671618925574e154,
        0.62482875317012139806026314897328136965964374299906322451833626941862e158,
        -0.41376954055676364528233672305143910272597687609280824732944653664345e162,
        0.28419769324142769069351633035666203091678626692459848096036450446153e166,
        -0.20233105203250752333992061204250782338499709868648694329341733953856e170,
        0.14921413227682859768600979116852113769192082397308681022730906838764e174,
        -0.11391942318647607278195227387147815982946299255584776067390546283266e178,
        0.89984973907118798973274600559964730505886269200285584307716001979151e181,
        -0.73498618581016154263237896162942608870795994021129309881094563967910e185,
        0.62042034816474031028845699860660079271705962703651243271640215253005e189]
    #endif
    switch T.self {
    case is Float.Type:
        let result = f as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = d as Array<Double>
        return result as! Array<T>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = l as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        let result = d as Array<Double>
        return result as! Array<T>
    }
}

func Vcoeff<T: SSFloatingPoint>() -> Array<T> {
    let f: Array<Float> = [
        1.0,
        0.10416666666666666666666666666666666666666666666666666666666666666667,
        -0.33094618055555555555555555555555555555555555555555555555555555555556,
        0.36136956862461419753086419753086419753086419753086419753086419753086e1,
        -0.83984945326395275871729864785420340975896531452087007642563198118754e2,
        0.33685630692930845753622830626592200666274740348814422888496962571037e4,
        -0.20713231106607890252977377856845981926357440760732941802900650637276e6,
        0.18097282066882778449431331373601761112628551971830435479269498473888e8,
        -0.21309444395672364695106172827605375452442300629551305981428785008379e10,
        0.32523869187619483120330380717331928218594181576469626622284133921492e12,
        -0.62446698182714354178599585173443015731252810847722720974668646995208e14,
        0.14729817433919221428748862989469425786509381441758339217882596234826e17,
        -0.41870023262835387031831169307108942313981607413837696274312354570063e19,
        0.14115582971009629114612866526991564864316743141214936159803917741306e22,
        -0.55686486988532093135443555068430236099429127519474369927264196276483e24,
        0.25414120415563205117290897011609704504117958895702715714297261718928e27,
        -0.13285320976148994930374487403381382511677438741525714111410410227917e30,
        0.78865443622886902650543525972805065726220987310540174043394169896799e32,
        -0.52761245869440267730251126474749725416169924433173936574780403898729e35,
        0.39511749687738754978707186616441860115896523182485334297380695925561e38,
        -0.32923290247609366681382018551721673465195880594473426214142086973247e41,
        0.30359489943433278235144569435560837233966593957760177297566358869186e44,
        -0.30830152332406270164377583091160563455014524379537218769617073966086e47,
        0.34325609828559626619691428942715725232658096603901061837756302968756e50,
        -0.41731456300646629062922610457970573676170714541136141310758967872890e53,
        0.55195180893208079575182955709289525687994646475016335125669817883713e56,
        -0.79150035232067397162841508858543292745122889767009874931157993833688e59,
        0.12267286410014702060147710311493346807399372162743542592030229492395e63,
        -0.20489465757544862177181168685362400780928284026545992418550424591155e66,
        0.36781201995018744410586705497584162101937619239291503710300378853588e69,
        -0.70785510224402391504410638973731615282432843867153838660600966190695e72,
        0.14570328765817175201745344397239061049289639510667166652366926788623e76,
        -0.32007402423228767995646231438096527047320321247086611792310326968654e79,
        0.74885388950666402410596485880458556983033741343261318201018549562040e82,
        -0.18624012221973572482406403572483861757301929301481060378790454939360e86,
        0.49146479067201303283191057797168315897937697549653670834510914285792e89,
        -0.13737679563804852903349620097905514534829657189061129536765282302984e93,
        0.40610325317648937486635390453257288210644048252427882240862813659530e96,
        -0.12676520941322158498322311515387022465292939801517893359670714044848e100,
        0.41723208208662814474860048359114616247849879135056450584779419025583e103,
        -0.14460228643992977278971715293625872465630777893677611595013226813385e107,
        0.52702137141948184886975471002292506399568818205669740583669405862891e110,
        -0.20174387491029824961205653853719597884391823201956355101548772468333e114,
        0.81017853587955248434572097165582819569986494473379223283336066657050e117,
        -0.34094352097537082769224279460429788581422930094799330429529116973719e121,
        0.15018993996821870455724263440162625429659710408567120834504368444388e125,
        -0.69185020550260382163148603962436395586032754664208939252674040930507e128,
        0.33294437491009899625612070497418754367170356692121410097534665436023e132,
        -0.16722968863179740044484559468409527225906823206213932532120401016256e136,
        0.87588665788890625267255395566168013064348940579513872897521595626651e139,
        -0.47797148292096096604328686586996148973995999656389939085032677629810e143,
        0.27152969647873325149100043985011418074992909890944936124651916757659e147,
        -0.16045372590074827247546573056862140802796751223989742959748936578369e151,
        0.98552707357503715509221245702668173028253308928381456246148353572071e154,
        -0.62871713691259881989197991638799674760450888458950498498758525415788e158,
        0.41629728127968126225313221039832645027885966270218693567128257568167e162,
        -0.28590262269286840162369262442491958517609091260359713489594756877926e166,
        0.20352339449544412644852790819518468781704630082369339335234743302728e170,
        -0.15007817824859664648921028573280959268038609339370901503470055457741e174,
        0.11456782500469922643539779328058943363839320875262498410359460045474e178,
        -0.90488547197595729727818007599162028667196587795950750687627446320423e181,
        0.73903139126156436722227750117680141015843739487204686022681600834281e185,
        -0.62377953850258650978985595488693003161283350731492126115310176459383e189]
    
    let d: Array<Double> = [
        1.0,
        0.10416666666666666666666666666666666666666666666666666666666666666667,
        -0.33094618055555555555555555555555555555555555555555555555555555555556,
        0.36136956862461419753086419753086419753086419753086419753086419753086e1,
        -0.83984945326395275871729864785420340975896531452087007642563198118754e2,
        0.33685630692930845753622830626592200666274740348814422888496962571037e4,
        -0.20713231106607890252977377856845981926357440760732941802900650637276e6,
        0.18097282066882778449431331373601761112628551971830435479269498473888e8,
        -0.21309444395672364695106172827605375452442300629551305981428785008379e10,
        0.32523869187619483120330380717331928218594181576469626622284133921492e12,
        -0.62446698182714354178599585173443015731252810847722720974668646995208e14,
        0.14729817433919221428748862989469425786509381441758339217882596234826e17,
        -0.41870023262835387031831169307108942313981607413837696274312354570063e19,
        0.14115582971009629114612866526991564864316743141214936159803917741306e22,
        -0.55686486988532093135443555068430236099429127519474369927264196276483e24,
        0.25414120415563205117290897011609704504117958895702715714297261718928e27,
        -0.13285320976148994930374487403381382511677438741525714111410410227917e30,
        0.78865443622886902650543525972805065726220987310540174043394169896799e32,
        -0.52761245869440267730251126474749725416169924433173936574780403898729e35,
        0.39511749687738754978707186616441860115896523182485334297380695925561e38,
        -0.32923290247609366681382018551721673465195880594473426214142086973247e41,
        0.30359489943433278235144569435560837233966593957760177297566358869186e44,
        -0.30830152332406270164377583091160563455014524379537218769617073966086e47,
        0.34325609828559626619691428942715725232658096603901061837756302968756e50,
        -0.41731456300646629062922610457970573676170714541136141310758967872890e53,
        0.55195180893208079575182955709289525687994646475016335125669817883713e56,
        -0.79150035232067397162841508858543292745122889767009874931157993833688e59,
        0.12267286410014702060147710311493346807399372162743542592030229492395e63,
        -0.20489465757544862177181168685362400780928284026545992418550424591155e66,
        0.36781201995018744410586705497584162101937619239291503710300378853588e69,
        -0.70785510224402391504410638973731615282432843867153838660600966190695e72,
        0.14570328765817175201745344397239061049289639510667166652366926788623e76,
        -0.32007402423228767995646231438096527047320321247086611792310326968654e79,
        0.74885388950666402410596485880458556983033741343261318201018549562040e82,
        -0.18624012221973572482406403572483861757301929301481060378790454939360e86,
        0.49146479067201303283191057797168315897937697549653670834510914285792e89,
        -0.13737679563804852903349620097905514534829657189061129536765282302984e93,
        0.40610325317648937486635390453257288210644048252427882240862813659530e96,
        -0.12676520941322158498322311515387022465292939801517893359670714044848e100,
        0.41723208208662814474860048359114616247849879135056450584779419025583e103,
        -0.14460228643992977278971715293625872465630777893677611595013226813385e107,
        0.52702137141948184886975471002292506399568818205669740583669405862891e110,
        -0.20174387491029824961205653853719597884391823201956355101548772468333e114,
        0.81017853587955248434572097165582819569986494473379223283336066657050e117,
        -0.34094352097537082769224279460429788581422930094799330429529116973719e121,
        0.15018993996821870455724263440162625429659710408567120834504368444388e125,
        -0.69185020550260382163148603962436395586032754664208939252674040930507e128,
        0.33294437491009899625612070497418754367170356692121410097534665436023e132,
        -0.16722968863179740044484559468409527225906823206213932532120401016256e136,
        0.87588665788890625267255395566168013064348940579513872897521595626651e139,
        -0.47797148292096096604328686586996148973995999656389939085032677629810e143,
        0.27152969647873325149100043985011418074992909890944936124651916757659e147,
        -0.16045372590074827247546573056862140802796751223989742959748936578369e151,
        0.98552707357503715509221245702668173028253308928381456246148353572071e154,
        -0.62871713691259881989197991638799674760450888458950498498758525415788e158,
        0.41629728127968126225313221039832645027885966270218693567128257568167e162,
        -0.28590262269286840162369262442491958517609091260359713489594756877926e166,
        0.20352339449544412644852790819518468781704630082369339335234743302728e170,
        -0.15007817824859664648921028573280959268038609339370901503470055457741e174,
        0.11456782500469922643539779328058943363839320875262498410359460045474e178,
        -0.90488547197595729727818007599162028667196587795950750687627446320423e181,
        0.73903139126156436722227750117680141015843739487204686022681600834281e185,
        -0.62377953850258650978985595488693003161283350731492126115310176459383e189]
    #if arch(i386) || arch(x86_64)
    let l: Array<Float80> = [
        1.0,
        0.10416666666666666666666666666666666666666666666666666666666666666667,
        -0.33094618055555555555555555555555555555555555555555555555555555555556,
        0.36136956862461419753086419753086419753086419753086419753086419753086e1,
        -0.83984945326395275871729864785420340975896531452087007642563198118754e2,
        0.33685630692930845753622830626592200666274740348814422888496962571037e4,
        -0.20713231106607890252977377856845981926357440760732941802900650637276e6,
        0.18097282066882778449431331373601761112628551971830435479269498473888e8,
        -0.21309444395672364695106172827605375452442300629551305981428785008379e10,
        0.32523869187619483120330380717331928218594181576469626622284133921492e12,
        -0.62446698182714354178599585173443015731252810847722720974668646995208e14,
        0.14729817433919221428748862989469425786509381441758339217882596234826e17,
        -0.41870023262835387031831169307108942313981607413837696274312354570063e19,
        0.14115582971009629114612866526991564864316743141214936159803917741306e22,
        -0.55686486988532093135443555068430236099429127519474369927264196276483e24,
        0.25414120415563205117290897011609704504117958895702715714297261718928e27,
        -0.13285320976148994930374487403381382511677438741525714111410410227917e30,
        0.78865443622886902650543525972805065726220987310540174043394169896799e32,
        -0.52761245869440267730251126474749725416169924433173936574780403898729e35,
        0.39511749687738754978707186616441860115896523182485334297380695925561e38,
        -0.32923290247609366681382018551721673465195880594473426214142086973247e41,
        0.30359489943433278235144569435560837233966593957760177297566358869186e44,
        -0.30830152332406270164377583091160563455014524379537218769617073966086e47,
        0.34325609828559626619691428942715725232658096603901061837756302968756e50,
        -0.41731456300646629062922610457970573676170714541136141310758967872890e53,
        0.55195180893208079575182955709289525687994646475016335125669817883713e56,
        -0.79150035232067397162841508858543292745122889767009874931157993833688e59,
        0.12267286410014702060147710311493346807399372162743542592030229492395e63,
        -0.20489465757544862177181168685362400780928284026545992418550424591155e66,
        0.36781201995018744410586705497584162101937619239291503710300378853588e69,
        -0.70785510224402391504410638973731615282432843867153838660600966190695e72,
        0.14570328765817175201745344397239061049289639510667166652366926788623e76,
        -0.32007402423228767995646231438096527047320321247086611792310326968654e79,
        0.74885388950666402410596485880458556983033741343261318201018549562040e82,
        -0.18624012221973572482406403572483861757301929301481060378790454939360e86,
        0.49146479067201303283191057797168315897937697549653670834510914285792e89,
        -0.13737679563804852903349620097905514534829657189061129536765282302984e93,
        0.40610325317648937486635390453257288210644048252427882240862813659530e96,
        -0.12676520941322158498322311515387022465292939801517893359670714044848e100,
        0.41723208208662814474860048359114616247849879135056450584779419025583e103,
        -0.14460228643992977278971715293625872465630777893677611595013226813385e107,
        0.52702137141948184886975471002292506399568818205669740583669405862891e110,
        -0.20174387491029824961205653853719597884391823201956355101548772468333e114,
        0.81017853587955248434572097165582819569986494473379223283336066657050e117,
        -0.34094352097537082769224279460429788581422930094799330429529116973719e121,
        0.15018993996821870455724263440162625429659710408567120834504368444388e125,
        -0.69185020550260382163148603962436395586032754664208939252674040930507e128,
        0.33294437491009899625612070497418754367170356692121410097534665436023e132,
        -0.16722968863179740044484559468409527225906823206213932532120401016256e136,
        0.87588665788890625267255395566168013064348940579513872897521595626651e139,
        -0.47797148292096096604328686586996148973995999656389939085032677629810e143,
        0.27152969647873325149100043985011418074992909890944936124651916757659e147,
        -0.16045372590074827247546573056862140802796751223989742959748936578369e151,
        0.98552707357503715509221245702668173028253308928381456246148353572071e154,
        -0.62871713691259881989197991638799674760450888458950498498758525415788e158,
        0.41629728127968126225313221039832645027885966270218693567128257568167e162,
        -0.28590262269286840162369262442491958517609091260359713489594756877926e166,
        0.20352339449544412644852790819518468781704630082369339335234743302728e170,
        -0.15007817824859664648921028573280959268038609339370901503470055457741e174,
        0.11456782500469922643539779328058943363839320875262498410359460045474e178,
        -0.90488547197595729727818007599162028667196587795950750687627446320423e181,
        0.73903139126156436722227750117680141015843739487204686022681600834281e185,
        -0.62377953850258650978985595488693003161283350731492126115310176459383e189]
    #endif
    switch T.self {
    case is Float.Type:
        let result = f as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = d as Array<Double>
        return result as! Array<T>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = l as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        let result = d as Array<Double>
        return result as! Array<T>
    }
}
*/
func aizr<T: SSFloatingPoint>() -> Array<T> {
    let f: Array<Float> = [
        -2.33810741045976703848919725244673544063854014567238785248385443721367,
        -4.08794944413097061663698870145739106022476469910852975498416087602512,
        -5.52055982809555105912985551293129357379721428061752510483288757695750,
        -6.78670809007175899878024638449617696605388247739349361652352909355624,
        -7.94413358712085312313828055579826853214067439697221480864385428571645,
        -9.02265085334098038015819083988008925652467753515608251556068568311328,
        -10.04017434155808593059455673736251809404290256910583310437135385095343,
        -11.00852430373326289323543964959015101673082538150403750570001348624448,
        -11.93601556323626251700636490293058431557788623211982397092353864291238,
        -12.82877675286575720040672940724182447738641559957341994148696682189440,
        -13.69148903521071792829569677946692054166536980920076805254071472510959,
        -14.52782995177533498207398144299589337871416486983482524101054549228523,
        -15.34075513597799685714620851348148670511758332024803704969134367360914,
        -16.13268515694577143934598044720252179051827239707628246640238983564054,
        -16.90563399742994262703523877061147659909005109503171855603649023736814,
        -17.66130010569705750925365030401805595215321866811995330361255823961027,
        -18.40113259920711541586139792950433675459381460602005817693995569303975,
        -19.12638047424695214412414868973249468907545838475308007653292923976344,
        -19.83812989172149970094756361601140419833568249453885876463439190533102,
        -20.53733290767756635998268141130810174530421801473749208218771674302329,
        -21.22482994364209695519767672540520133128372022695142223538915255700301,
        -21.90136759558513070740823704210580626014944052125548559380507316477778,
        -22.56761291749650283145917485684307040940078566103896133980710912405921,
        -23.22416500112168106132095039028827471366842731266977699133091665595986,
        -23.87156445553591856711857620915978417026368251469855098111241320250607]
    
    let d: Array<Double> = [
        -2.33810741045976703848919725244673544063854014567238785248385443721367,
        -4.08794944413097061663698870145739106022476469910852975498416087602512,
        -5.52055982809555105912985551293129357379721428061752510483288757695750,
        -6.78670809007175899878024638449617696605388247739349361652352909355624,
        -7.94413358712085312313828055579826853214067439697221480864385428571645,
        -9.02265085334098038015819083988008925652467753515608251556068568311328,
        -10.04017434155808593059455673736251809404290256910583310437135385095343,
        -11.00852430373326289323543964959015101673082538150403750570001348624448,
        -11.93601556323626251700636490293058431557788623211982397092353864291238,
        -12.82877675286575720040672940724182447738641559957341994148696682189440,
        -13.69148903521071792829569677946692054166536980920076805254071472510959,
        -14.52782995177533498207398144299589337871416486983482524101054549228523,
        -15.34075513597799685714620851348148670511758332024803704969134367360914,
        -16.13268515694577143934598044720252179051827239707628246640238983564054,
        -16.90563399742994262703523877061147659909005109503171855603649023736814,
        -17.66130010569705750925365030401805595215321866811995330361255823961027,
        -18.40113259920711541586139792950433675459381460602005817693995569303975,
        -19.12638047424695214412414868973249468907545838475308007653292923976344,
        -19.83812989172149970094756361601140419833568249453885876463439190533102,
        -20.53733290767756635998268141130810174530421801473749208218771674302329,
        -21.22482994364209695519767672540520133128372022695142223538915255700301,
        -21.90136759558513070740823704210580626014944052125548559380507316477778,
        -22.56761291749650283145917485684307040940078566103896133980710912405921,
        -23.22416500112168106132095039028827471366842731266977699133091665595986,
        -23.87156445553591856711857620915978417026368251469855098111241320250607]
    #if arch(i386) || arch(x86_64)
    
    let l: Array<Float80> = [
        -2.33810741045976703848919725244673544063854014567238785248385443721367,
        -4.08794944413097061663698870145739106022476469910852975498416087602512,
        -5.52055982809555105912985551293129357379721428061752510483288757695750,
        -6.78670809007175899878024638449617696605388247739349361652352909355624,
        -7.94413358712085312313828055579826853214067439697221480864385428571645,
        -9.02265085334098038015819083988008925652467753515608251556068568311328,
        -10.04017434155808593059455673736251809404290256910583310437135385095343,
        -11.00852430373326289323543964959015101673082538150403750570001348624448,
        -11.93601556323626251700636490293058431557788623211982397092353864291238,
        -12.82877675286575720040672940724182447738641559957341994148696682189440,
        -13.69148903521071792829569677946692054166536980920076805254071472510959,
        -14.52782995177533498207398144299589337871416486983482524101054549228523,
        -15.34075513597799685714620851348148670511758332024803704969134367360914,
        -16.13268515694577143934598044720252179051827239707628246640238983564054,
        -16.90563399742994262703523877061147659909005109503171855603649023736814,
        -17.66130010569705750925365030401805595215321866811995330361255823961027,
        -18.40113259920711541586139792950433675459381460602005817693995569303975,
        -19.12638047424695214412414868973249468907545838475308007653292923976344,
        -19.83812989172149970094756361601140419833568249453885876463439190533102,
        -20.53733290767756635998268141130810174530421801473749208218771674302329,
        -21.22482994364209695519767672540520133128372022695142223538915255700301,
        -21.90136759558513070740823704210580626014944052125548559380507316477778,
        -22.56761291749650283145917485684307040940078566103896133980710912405921,
        -23.22416500112168106132095039028827471366842731266977699133091665595986,
        -23.87156445553591856711857620915978417026368251469855098111241320250607]
    #endif
    switch T.self {
    case is Float.Type:
        let result = f as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = d as Array<Double>
        return result as! Array<T>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = l as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        let result = d as Array<Double>
        return result as! Array<T>
    }
}

func daizr<T: SSFloatingPoint>() -> Array<T> {
    let f: Array<Float> = [
        -1.01879297164747108901732478339974382421820544125443456387086141398280,
        -3.24819758217983653787542377077584338415362303651722056102813298651085,
        -4.82009921117873563940061626041637941446268823149559840636862039390690,
        -6.16330735563948654763784353309140759297448387720351451555576295688298,
        -7.37217725504777017709218227112798901002013456098406544685663881697862,
        -8.48848673401972213288099541573077295112964359668407460466365614498850,
        -9.53544905243354747070263342700063969538820217161052760208983694238694,
        -10.52766039695740728197814249142222864298654636972840675098825728664860,
        -11.47505663348024529493721652240563873475572084899288324564501046010262,
        -12.38478837184574732549333923538262410099237019478484289722429657302031,
        -13.26221896166521038243727842123812965366637123382426125928326035400567,
        -14.11150197046299528163274595367191475659596057504177550100311260702737,
        -14.93593719672051746650728205326279421117972255282091467187721012647215,
        -15.73820137369253830268645323011724506466987051724640138554427300411434,
        -16.52050382543379354220519308946062809031267401323065118962585800030048,
        -17.28469505021643735664373842332082107165009909874506202863636173764009,
        -18.03234462250439339526520862299153702097903336787137198226440397831148,
        -18.76479843766595474015165121077601065287558788488499214751351991943185,
        -19.48322165656723117752471804759502558594797583425851677835534147425693,
        -20.18863150946337315365453214288926902260240432967877744616116532852433,
        -20.88192275551673770086895619234965436951497044315845023182432979152615,
        -21.56388772319897495770118028517312743827608287640899482894099397157279,
        -22.23523228534891333075485328085016555368139534299890933471263856691166,
        -22.89658873887461900146658726220533486755445824339047035924534481515681,
        -23.54852629592880157396398563890195889083567420203896865761957496760415]
    
    let d: Array<Double> = [
        -1.01879297164747108901732478339974382421820544125443456387086141398280,
        -3.24819758217983653787542377077584338415362303651722056102813298651085,
        -4.82009921117873563940061626041637941446268823149559840636862039390690,
        -6.16330735563948654763784353309140759297448387720351451555576295688298,
        -7.37217725504777017709218227112798901002013456098406544685663881697862,
        -8.48848673401972213288099541573077295112964359668407460466365614498850,
        -9.53544905243354747070263342700063969538820217161052760208983694238694,
        -10.52766039695740728197814249142222864298654636972840675098825728664860,
        -11.47505663348024529493721652240563873475572084899288324564501046010262,
        -12.38478837184574732549333923538262410099237019478484289722429657302031,
        -13.26221896166521038243727842123812965366637123382426125928326035400567,
        -14.11150197046299528163274595367191475659596057504177550100311260702737,
        -14.93593719672051746650728205326279421117972255282091467187721012647215,
        -15.73820137369253830268645323011724506466987051724640138554427300411434,
        -16.52050382543379354220519308946062809031267401323065118962585800030048,
        -17.28469505021643735664373842332082107165009909874506202863636173764009,
        -18.03234462250439339526520862299153702097903336787137198226440397831148,
        -18.76479843766595474015165121077601065287558788488499214751351991943185,
        -19.48322165656723117752471804759502558594797583425851677835534147425693,
        -20.18863150946337315365453214288926902260240432967877744616116532852433,
        -20.88192275551673770086895619234965436951497044315845023182432979152615,
        -21.56388772319897495770118028517312743827608287640899482894099397157279,
        -22.23523228534891333075485328085016555368139534299890933471263856691166,
        -22.89658873887461900146658726220533486755445824339047035924534481515681,
        -23.54852629592880157396398563890195889083567420203896865761957496760415]
    #if arch(i386) || arch(x86_64)
    
    let l: Array<Float80> = [
        -1.01879297164747108901732478339974382421820544125443456387086141398280,
        -3.24819758217983653787542377077584338415362303651722056102813298651085,
        -4.82009921117873563940061626041637941446268823149559840636862039390690,
        -6.16330735563948654763784353309140759297448387720351451555576295688298,
        -7.37217725504777017709218227112798901002013456098406544685663881697862,
        -8.48848673401972213288099541573077295112964359668407460466365614498850,
        -9.53544905243354747070263342700063969538820217161052760208983694238694,
        -10.52766039695740728197814249142222864298654636972840675098825728664860,
        -11.47505663348024529493721652240563873475572084899288324564501046010262,
        -12.38478837184574732549333923538262410099237019478484289722429657302031,
        -13.26221896166521038243727842123812965366637123382426125928326035400567,
        -14.11150197046299528163274595367191475659596057504177550100311260702737,
        -14.93593719672051746650728205326279421117972255282091467187721012647215,
        -15.73820137369253830268645323011724506466987051724640138554427300411434,
        -16.52050382543379354220519308946062809031267401323065118962585800030048,
        -17.28469505021643735664373842332082107165009909874506202863636173764009,
        -18.03234462250439339526520862299153702097903336787137198226440397831148,
        -18.76479843766595474015165121077601065287558788488499214751351991943185,
        -19.48322165656723117752471804759502558594797583425851677835534147425693,
        -20.18863150946337315365453214288926902260240432967877744616116532852433,
        -20.88192275551673770086895619234965436951497044315845023182432979152615,
        -21.56388772319897495770118028517312743827608287640899482894099397157279,
        -22.23523228534891333075485328085016555368139534299890933471263856691166,
        -22.89658873887461900146658726220533486755445824339047035924534481515681,
        -23.54852629592880157396398563890195889083567420203896865761957496760415]
    #endif
    switch T.self {
    case is Float.Type:
        let result = f as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = d as Array<Double>
        return result as! Array<T>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = l as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        let result = d as Array<Double>
        return result as! Array<T>
    }
}


func bizr<T: SSFloatingPoint>() -> Array<T> {
    let f: Array<Float> = [
        -1.17371322270912792491997996247390210454364638917570309757920761150430,
        -3.27109330283635271568022824016641380630093596910028480148503239626113,
        -4.83073784166201593266770933990517817696614261732301026576850194149303,
        -6.16985212831025125983336452055593667996554943427563109765876409289291,
        -7.37676207936776371359995933044254122209152229939709572992390169564234,
        -8.49194884650938801344803949280977672860508755505545790582286779923401,
        -9.53819437934623888663298854515601962083907207638247038808917424104129,
        -10.52991350670535792440055559845314799952957759462139619609904123067107,
        -11.47695355127877943792346492473281967194825381488769633431302780799070,
        -12.38641713858273874556190150286328094825979838468560971551502681648386,
        -13.26363952294180555411074332439549077524115196098126631023507247982663,
        -14.11275680906865779158730978222401847168404282855088116185500171775926,
        -14.93705741215416404020321431049090463961217635177820922699751842280182,
        -15.73921035119048277089497847974818338071801627678405270593898207072179,
        -16.52141955063437905391794996521054571671103103705808118179905226958795,
        -17.28553162458124253293423669225353924252797536027103490380471228329517,
        -18.03311328722500157217111254333919200080872914164059812874417048491807,
        -18.76550828448008104134297892361051284402671895514206863403515927768504,
        -19.48388013298923401366599865924135751220629777936103551104169553178148,
        -20.18924478539620242022532322582753607646497835839342208483158243219733,
        -20.88249599419317576784241835353106077909763612165974937464360562852603,
        -21.56442528471297765275553097792876056885144913635808007380299667653380,
        -22.23573788180338516651471705596359912920512830316306238465359314928271,
        -22.89706555421979347392720167028728219215245475061019081243083088117395,
        -23.54897707964244826910809088370627200288704237097332714530518718245203]
    
    let d: Array<Double> = [
        -1.17371322270912792491997996247390210454364638917570309757920761150430,
        -3.27109330283635271568022824016641380630093596910028480148503239626113,
        -4.83073784166201593266770933990517817696614261732301026576850194149303,
        -6.16985212831025125983336452055593667996554943427563109765876409289291,
        -7.37676207936776371359995933044254122209152229939709572992390169564234,
        -8.49194884650938801344803949280977672860508755505545790582286779923401,
        -9.53819437934623888663298854515601962083907207638247038808917424104129,
        -10.52991350670535792440055559845314799952957759462139619609904123067107,
        -11.47695355127877943792346492473281967194825381488769633431302780799070,
        -12.38641713858273874556190150286328094825979838468560971551502681648386,
        -13.26363952294180555411074332439549077524115196098126631023507247982663,
        -14.11275680906865779158730978222401847168404282855088116185500171775926,
        -14.93705741215416404020321431049090463961217635177820922699751842280182,
        -15.73921035119048277089497847974818338071801627678405270593898207072179,
        -16.52141955063437905391794996521054571671103103705808118179905226958795,
        -17.28553162458124253293423669225353924252797536027103490380471228329517,
        -18.03311328722500157217111254333919200080872914164059812874417048491807,
        -18.76550828448008104134297892361051284402671895514206863403515927768504,
        -19.48388013298923401366599865924135751220629777936103551104169553178148,
        -20.18924478539620242022532322582753607646497835839342208483158243219733,
        -20.88249599419317576784241835353106077909763612165974937464360562852603,
        -21.56442528471297765275553097792876056885144913635808007380299667653380,
        -22.23573788180338516651471705596359912920512830316306238465359314928271,
        -22.89706555421979347392720167028728219215245475061019081243083088117395,
        -23.54897707964244826910809088370627200288704237097332714530518718245203]
    #if arch(i386) || arch(x86_64)
    
    let l: Array<Float80> = [
        -1.17371322270912792491997996247390210454364638917570309757920761150430,
        -3.27109330283635271568022824016641380630093596910028480148503239626113,
        -4.83073784166201593266770933990517817696614261732301026576850194149303,
        -6.16985212831025125983336452055593667996554943427563109765876409289291,
        -7.37676207936776371359995933044254122209152229939709572992390169564234,
        -8.49194884650938801344803949280977672860508755505545790582286779923401,
        -9.53819437934623888663298854515601962083907207638247038808917424104129,
        -10.52991350670535792440055559845314799952957759462139619609904123067107,
        -11.47695355127877943792346492473281967194825381488769633431302780799070,
        -12.38641713858273874556190150286328094825979838468560971551502681648386,
        -13.26363952294180555411074332439549077524115196098126631023507247982663,
        -14.11275680906865779158730978222401847168404282855088116185500171775926,
        -14.93705741215416404020321431049090463961217635177820922699751842280182,
        -15.73921035119048277089497847974818338071801627678405270593898207072179,
        -16.52141955063437905391794996521054571671103103705808118179905226958795,
        -17.28553162458124253293423669225353924252797536027103490380471228329517,
        -18.03311328722500157217111254333919200080872914164059812874417048491807,
        -18.76550828448008104134297892361051284402671895514206863403515927768504,
        -19.48388013298923401366599865924135751220629777936103551104169553178148,
        -20.18924478539620242022532322582753607646497835839342208483158243219733,
        -20.88249599419317576784241835353106077909763612165974937464360562852603,
        -21.56442528471297765275553097792876056885144913635808007380299667653380,
        -22.23573788180338516651471705596359912920512830316306238465359314928271,
        -22.89706555421979347392720167028728219215245475061019081243083088117395,
        -23.54897707964244826910809088370627200288704237097332714530518718245203]
    #endif
    switch T.self {
    case is Float.Type:
        let result = f as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = d as Array<Double>
        return result as! Array<T>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = l as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        let result = d as Array<Double>
        return result as! Array<T>
    }
}


func dbizr<T: SSFloatingPoint>() -> Array<T> {
    let f: Array<Float> = [
        -2.29443968261412324662245867376910282907848946700969989589640271599098,
        -4.07315508907182821555236851509270995079318027043612840965664763255332,
        -5.51239572966359949625959252047918324308288262563228155846581341204411,
        -6.78129444599030539002866629612268711724774958242124874315576274421256,
        -7.94017868916857892668015506404469358236295026378631200761623213008077,
        -9.01958335879423906741485643920410500793021840458929511999436467689141,
        -10.03769633490854580175763552931088600719650708912364209574799165928857,
        -11.00646266771228994042178673901908858144008056513455219417559368827981,
        -11.93426164501484466280156966627884018620779786420344917372782764148357,
        -12.82725830917721764018582515874172632262398632000325301764491321749451,
        -13.69015582683504910123087530032843814837512065755814073750827235404234,
        -14.52664576348571140952971574483676917698490608428973245022236766674096,
        -15.33969308224240410861550731532421181298426399724957048054681874323756,
        -16.13172478238590057788823351351896352801125898819864759735671923382317,
        -16.90475941188964995823127191076849074551409618145881961325073707696760,
        -17.66049874311497610219306321601848781394657665773696300832840696681477,
        -18.40039436718170327981549177420453616844392469219826273367311029445693,
        -19.12569715641263806611390647390670371376640167393442425682883753076962,
        -19.83749471841591050293338761137287048759231913849216259169928462093709,
        -20.53674024145327398011335618110930387074716842210354620328691065812538,
        -21.22427504488926656905931114462097972114007365699962254630891208179793,
        -21.90084644513920828138642436184221845938113289053710021975475917896781,
        -22.56712208049720046972298553127734852587993691855079121202853774320013,
        -23.22370152120896211611253695016184095318132604851766457576200217045542,
        -23.87112577167797359456463262632343377384840108602012722903210953550931]
    
    let d: Array<Double> = [
        -2.29443968261412324662245867376910282907848946700969989589640271599098,
        -4.07315508907182821555236851509270995079318027043612840965664763255332,
        -5.51239572966359949625959252047918324308288262563228155846581341204411,
        -6.78129444599030539002866629612268711724774958242124874315576274421256,
        -7.94017868916857892668015506404469358236295026378631200761623213008077,
        -9.01958335879423906741485643920410500793021840458929511999436467689141,
        -10.03769633490854580175763552931088600719650708912364209574799165928857,
        -11.00646266771228994042178673901908858144008056513455219417559368827981,
        -11.93426164501484466280156966627884018620779786420344917372782764148357,
        -12.82725830917721764018582515874172632262398632000325301764491321749451,
        -13.69015582683504910123087530032843814837512065755814073750827235404234,
        -14.52664576348571140952971574483676917698490608428973245022236766674096,
        -15.33969308224240410861550731532421181298426399724957048054681874323756,
        -16.13172478238590057788823351351896352801125898819864759735671923382317,
        -16.90475941188964995823127191076849074551409618145881961325073707696760,
        -17.66049874311497610219306321601848781394657665773696300832840696681477,
        -18.40039436718170327981549177420453616844392469219826273367311029445693,
        -19.12569715641263806611390647390670371376640167393442425682883753076962,
        -19.83749471841591050293338761137287048759231913849216259169928462093709,
        -20.53674024145327398011335618110930387074716842210354620328691065812538,
        -21.22427504488926656905931114462097972114007365699962254630891208179793,
        -21.90084644513920828138642436184221845938113289053710021975475917896781,
        -22.56712208049720046972298553127734852587993691855079121202853774320013,
        -23.22370152120896211611253695016184095318132604851766457576200217045542,
        -23.87112577167797359456463262632343377384840108602012722903210953550931]
    #if arch(i386) || arch(x86_64)
    
    let l: Array<Float80> = [
        -2.29443968261412324662245867376910282907848946700969989589640271599098,
        -4.07315508907182821555236851509270995079318027043612840965664763255332,
        -5.51239572966359949625959252047918324308288262563228155846581341204411,
        -6.78129444599030539002866629612268711724774958242124874315576274421256,
        -7.94017868916857892668015506404469358236295026378631200761623213008077,
        -9.01958335879423906741485643920410500793021840458929511999436467689141,
        -10.03769633490854580175763552931088600719650708912364209574799165928857,
        -11.00646266771228994042178673901908858144008056513455219417559368827981,
        -11.93426164501484466280156966627884018620779786420344917372782764148357,
        -12.82725830917721764018582515874172632262398632000325301764491321749451,
        -13.69015582683504910123087530032843814837512065755814073750827235404234,
        -14.52664576348571140952971574483676917698490608428973245022236766674096,
        -15.33969308224240410861550731532421181298426399724957048054681874323756,
        -16.13172478238590057788823351351896352801125898819864759735671923382317,
        -16.90475941188964995823127191076849074551409618145881961325073707696760,
        -17.66049874311497610219306321601848781394657665773696300832840696681477,
        -18.40039436718170327981549177420453616844392469219826273367311029445693,
        -19.12569715641263806611390647390670371376640167393442425682883753076962,
        -19.83749471841591050293338761137287048759231913849216259169928462093709,
        -20.53674024145327398011335618110930387074716842210354620328691065812538,
        -21.22427504488926656905931114462097972114007365699962254630891208179793,
        -21.90084644513920828138642436184221845938113289053710021975475917896781,
        -22.56712208049720046972298553127734852587993691855079121202853774320013,
        -23.22370152120896211611253695016184095318132604851766457576200217045542,
        -23.87112577167797359456463262632343377384840108602012722903210953550931]
    #endif
    switch T.self {
    case is Float.Type:
        let result = f as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = d as Array<Double>
        return result as! Array<T>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = l as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        let result = d as Array<Double>
        return result as! Array<T>
    }
}

/*
func thetacoeff<T: SSFloatingPoint>() -> Array<T> {
    let f: Array<Float> = [
        1.0000000000000000000000000000000000000000000000000000000000000000000e+00,
        1.5625000000000000000000000000000000000000000000000000000000000000000e-01,
        1.7985026041666666666666666666666666666666666666666666666666666666670e-01,
        1.2638092041015625000000000000000000000000000000000000000000000000000e+00,
        2.1832866753850664411272321428571428571428571428571428571428571428570e+01,
        6.9682822536884082688225640190972222222222222222222222222222222222220e+02,
        3.5553981581391285131262107328935102982954545454545454545454545454550e+04,
        2.6532584171176254655550180289607781630295973557692307692307692307690e+06,
        2.7258321302415599342250374093055143021047115325927734375000000000000e+08,
        3.6894027011098001901607477714297461341843967709471197689280790441180e+10,
        6.3630204766133750347903292605201682576982217429567275470808932655740e+12,
        1.3622439180500760352059703427764362988546306819701147192279763874550e+15,
        3.5446828581078074793552458265811520091905839784775414983950826274890e+17,
        1.1017990287911060069986723262330428844182307035279722983583949869060e+20,
        4.0320823577747335533970347823492793114462319968284659862713417937250e+22,
        1.7159646692716793386038283530387825075493716774249119449042189710410e+25,
        8.4031035110193005527486652122292612450561213930864781736528036247480e+27,
        4.6916652616593043608874014133910554079508141416060179915669243125790e+30,
        2.9625489083114947131526274616960212993262723579957461622065841493850e+33,
        2.1006649445213587744194779196040385627926101231259943031483704675450e+36,
        1.6620414565199836046517241168226679575433914398847140159409431569400e+39,
        1.4589768148863538676908338329952770803471443409116858702096237708490e+42,
        1.4136706205926967227550391181089542632840298521113599879861436872780e+45,
        1.5049528873233485453201090242148583430669331596967888813309286983220e+48,
        1.7528120867435543022238293679384047783034582054789241354396665814190e+51,
        2.2248798784215759381108095700088082121325362980595660350417563574900e+54,
        3.0668742919686650506786294155949844120360694119732382794844730546530e+57,
        4.5759897594438856162245163173704124179167067431675218696740068750570e+60,
        7.3682324048945997036117127108954093722721949946103451048231900538500e+63,
        1.2767812907658639911193679647694549374414268530237897473653855408160e+67,
        2.3747413389528063711999564032375036732632838473204649286532194299650e+70,
        4.7294599973899606439620494750909194373558101517093261954177214594550e+73,
        1.0062840158864202353776785670460809939692662665374140432947800580520e+77,
        2.2825722023880581733954080677391959965131449243240891757158807086650e+80,
        5.5088575969201769653275088819145994402997486982906377742850251255490e+83,
        1.4119574904108397754635319483178352586648916671672757537207984396580e+87,
        3.8365603338945820651443721086714857583386907373667502273506193817610e+90,
        1.1033246832978464491034681560090717113928219873397757024970797143410e+94,
        3.3529399615471696053962311884989125864086206752781566570555462826900e+97,
        1.0751426905865614366516033970490417988024797993593296124425204481830e+101,
        3.6325759548575941054331531628741592937638711725735797561598681234640e+104,
        1.2914958421278365429073565165388490025468863490549642689956743754280e+108,
        4.8255989348832298734268326774116915672615870738562487397862875989870e+111,
        1.8926320413720882742332339252335781415823127647556584051535791102430e+115,
        7.7828653867243241612219242316942961428397330907284697950596299672640e+118,
        3.3519372264089624493413195232679066342813817418642368984048705399450e+122,
        1.5103632391716812602137633280398852067548262843999179493462357088140e+126,
        7.1131556794721283742180920205235953698098271487901179565894695165920e+129,
        3.4980302564753714551386271025304835533159465936045523336850630596900e+133,
        1.7946000747753342325010185977181141233793656634866192538659890317680e+137]
    
    let d: Array<Double> = [
        1.0000000000000000000000000000000000000000000000000000000000000000000e+00,
        1.5625000000000000000000000000000000000000000000000000000000000000000e-01,
        1.7985026041666666666666666666666666666666666666666666666666666666670e-01,
        1.2638092041015625000000000000000000000000000000000000000000000000000e+00,
        2.1832866753850664411272321428571428571428571428571428571428571428570e+01,
        6.9682822536884082688225640190972222222222222222222222222222222222220e+02,
        3.5553981581391285131262107328935102982954545454545454545454545454550e+04,
        2.6532584171176254655550180289607781630295973557692307692307692307690e+06,
        2.7258321302415599342250374093055143021047115325927734375000000000000e+08,
        3.6894027011098001901607477714297461341843967709471197689280790441180e+10,
        6.3630204766133750347903292605201682576982217429567275470808932655740e+12,
        1.3622439180500760352059703427764362988546306819701147192279763874550e+15,
        3.5446828581078074793552458265811520091905839784775414983950826274890e+17,
        1.1017990287911060069986723262330428844182307035279722983583949869060e+20,
        4.0320823577747335533970347823492793114462319968284659862713417937250e+22,
        1.7159646692716793386038283530387825075493716774249119449042189710410e+25,
        8.4031035110193005527486652122292612450561213930864781736528036247480e+27,
        4.6916652616593043608874014133910554079508141416060179915669243125790e+30,
        2.9625489083114947131526274616960212993262723579957461622065841493850e+33,
        2.1006649445213587744194779196040385627926101231259943031483704675450e+36,
        1.6620414565199836046517241168226679575433914398847140159409431569400e+39,
        1.4589768148863538676908338329952770803471443409116858702096237708490e+42,
        1.4136706205926967227550391181089542632840298521113599879861436872780e+45,
        1.5049528873233485453201090242148583430669331596967888813309286983220e+48,
        1.7528120867435543022238293679384047783034582054789241354396665814190e+51,
        2.2248798784215759381108095700088082121325362980595660350417563574900e+54,
        3.0668742919686650506786294155949844120360694119732382794844730546530e+57,
        4.5759897594438856162245163173704124179167067431675218696740068750570e+60,
        7.3682324048945997036117127108954093722721949946103451048231900538500e+63,
        1.2767812907658639911193679647694549374414268530237897473653855408160e+67,
        2.3747413389528063711999564032375036732632838473204649286532194299650e+70,
        4.7294599973899606439620494750909194373558101517093261954177214594550e+73,
        1.0062840158864202353776785670460809939692662665374140432947800580520e+77,
        2.2825722023880581733954080677391959965131449243240891757158807086650e+80,
        5.5088575969201769653275088819145994402997486982906377742850251255490e+83,
        1.4119574904108397754635319483178352586648916671672757537207984396580e+87,
        3.8365603338945820651443721086714857583386907373667502273506193817610e+90,
        1.1033246832978464491034681560090717113928219873397757024970797143410e+94,
        3.3529399615471696053962311884989125864086206752781566570555462826900e+97,
        1.0751426905865614366516033970490417988024797993593296124425204481830e+101,
        3.6325759548575941054331531628741592937638711725735797561598681234640e+104,
        1.2914958421278365429073565165388490025468863490549642689956743754280e+108,
        4.8255989348832298734268326774116915672615870738562487397862875989870e+111,
        1.8926320413720882742332339252335781415823127647556584051535791102430e+115,
        7.7828653867243241612219242316942961428397330907284697950596299672640e+118,
        3.3519372264089624493413195232679066342813817418642368984048705399450e+122,
        1.5103632391716812602137633280398852067548262843999179493462357088140e+126,
        7.1131556794721283742180920205235953698098271487901179565894695165920e+129,
        3.4980302564753714551386271025304835533159465936045523336850630596900e+133,
        1.7946000747753342325010185977181141233793656634866192538659890317680e+137]
    #if arch(i386) || arch(x86_64)
    
    let l: Array<Float80> = [
        1.0000000000000000000000000000000000000000000000000000000000000000000e+00,
        1.5625000000000000000000000000000000000000000000000000000000000000000e-01,
        1.7985026041666666666666666666666666666666666666666666666666666666670e-01,
        1.2638092041015625000000000000000000000000000000000000000000000000000e+00,
        2.1832866753850664411272321428571428571428571428571428571428571428570e+01,
        6.9682822536884082688225640190972222222222222222222222222222222222220e+02,
        3.5553981581391285131262107328935102982954545454545454545454545454550e+04,
        2.6532584171176254655550180289607781630295973557692307692307692307690e+06,
        2.7258321302415599342250374093055143021047115325927734375000000000000e+08,
        3.6894027011098001901607477714297461341843967709471197689280790441180e+10,
        6.3630204766133750347903292605201682576982217429567275470808932655740e+12,
        1.3622439180500760352059703427764362988546306819701147192279763874550e+15,
        3.5446828581078074793552458265811520091905839784775414983950826274890e+17,
        1.1017990287911060069986723262330428844182307035279722983583949869060e+20,
        4.0320823577747335533970347823492793114462319968284659862713417937250e+22,
        1.7159646692716793386038283530387825075493716774249119449042189710410e+25,
        8.4031035110193005527486652122292612450561213930864781736528036247480e+27,
        4.6916652616593043608874014133910554079508141416060179915669243125790e+30,
        2.9625489083114947131526274616960212993262723579957461622065841493850e+33,
        2.1006649445213587744194779196040385627926101231259943031483704675450e+36,
        1.6620414565199836046517241168226679575433914398847140159409431569400e+39,
        1.4589768148863538676908338329952770803471443409116858702096237708490e+42,
        1.4136706205926967227550391181089542632840298521113599879861436872780e+45,
        1.5049528873233485453201090242148583430669331596967888813309286983220e+48,
        1.7528120867435543022238293679384047783034582054789241354396665814190e+51,
        2.2248798784215759381108095700088082121325362980595660350417563574900e+54,
        3.0668742919686650506786294155949844120360694119732382794844730546530e+57,
        4.5759897594438856162245163173704124179167067431675218696740068750570e+60,
        7.3682324048945997036117127108954093722721949946103451048231900538500e+63,
        1.2767812907658639911193679647694549374414268530237897473653855408160e+67,
        2.3747413389528063711999564032375036732632838473204649286532194299650e+70,
        4.7294599973899606439620494750909194373558101517093261954177214594550e+73,
        1.0062840158864202353776785670460809939692662665374140432947800580520e+77,
        2.2825722023880581733954080677391959965131449243240891757158807086650e+80,
        5.5088575969201769653275088819145994402997486982906377742850251255490e+83,
        1.4119574904108397754635319483178352586648916671672757537207984396580e+87,
        3.8365603338945820651443721086714857583386907373667502273506193817610e+90,
        1.1033246832978464491034681560090717113928219873397757024970797143410e+94,
        3.3529399615471696053962311884989125864086206752781566570555462826900e+97,
        1.0751426905865614366516033970490417988024797993593296124425204481830e+101,
        3.6325759548575941054331531628741592937638711725735797561598681234640e+104,
        1.2914958421278365429073565165388490025468863490549642689956743754280e+108,
        4.8255989348832298734268326774116915672615870738562487397862875989870e+111,
        1.8926320413720882742332339252335781415823127647556584051535791102430e+115,
        7.7828653867243241612219242316942961428397330907284697950596299672640e+118,
        3.3519372264089624493413195232679066342813817418642368984048705399450e+122,
        1.5103632391716812602137633280398852067548262843999179493462357088140e+126,
        7.1131556794721283742180920205235953698098271487901179565894695165920e+129,
        3.4980302564753714551386271025304835533159465936045523336850630596900e+133,
        1.7946000747753342325010185977181141233793656634866192538659890317680e+137]
    #endif
    switch T.self {
    case is Float.Type:
        let result = f as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = d as Array<Double>
        return result as! Array<T>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = l as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        let result = d as Array<Double>
        return result as! Array<T>
    }
}

func phicoeff<T: SSFloatingPoint>() -> Array<T> {
    let f: Array<Float> = [
        1.0000000000000000000000000000000000000000000000000000000000000000000e+00,
        -2.1875000000000000000000000000000000000000000000000000000000000000000e-01,
        -2.3811848958333333333333333333333333333333333333333333333333333333330e-01,
        -1.5114471435546875000000000000000000000000000000000000000000000000000e+00,
        -2.4620345711708068847656250000000000000000000000000000000000000000000e+01,
        -7.6086294204038050439622667100694444444444444444444444444444444444440e+02,
        -3.8092128868188640229742635380138050426136363636363636363636363636360e+04,
        -2.8082562244080195275903231679246975825383112980769230769230769230770e+06,
        -2.8607946453262385636628692964222864247858524322509765625000000000000e+08,
        -3.8480790905747179385766298433031973967017085455796297858743106617650e+10,
        -6.6050619870875374085141895250268697180548303405980971690855528178970e+12,
        -1.4087107203786266895474229097071387064564936449547379500775908430420e+15,
        -3.6542984737250173263822582147634056560257268026887776125454859973850e+17,
        -1.1329639450011994200743048058647230246736432348623124181236088148240e+20,
        -4.1371744404875883016541729567285839631712496380598048629271123618470e+22,
        -1.7574349642737663059031534378525691263268308654379228784525651291710e+25,
        -8.5924160506996514557379617019132398803302175426817653569682851557100e+27,
        -4.7906551025465751515669729015000637241952562513029744187686495732900e+30,
        -3.0213269421511401499687820977552075015245020527256257041378966249360e+33,
        -2.1399970937320017557354494737300168515390960226867407271664411223300e+36,
        -1.6915031381769804103850733555848209612224387842573724614493225104370e+39,
        -1.4835311087410397492083286676216470036366696291606158301927652269280e+42,
        -1.4363173833472507948203636105983791470914532060599594653238608453020e+45,
        -1.5279550958145288037798152480016932257564787055599234667936240458810e+48,
        -1.7784267946552010527555830684846510215218772178165602333517334638230e+51,
        -2.2560262434454646323482238905021187368735965582739309243375596398990e+54,
        -3.1080758268011686600204807563047338098476704125999060010703485766130e+57,
        -4.6350816361828754091843816015741307407256970145816581103438065469270e+60,
        -7.4598303934675995061007145208437781401846859095965526853293166387510e+63,
        -1.2920824883839973738038478102778590132033803794125290485499782279180e+67,
        -2.4022123670554103535271126405427971447224944735511581081191319646570e+70,
        -4.7823342996246230871145477576426171365849607028316240761103920136300e+73,
        -1.0171687597738396277948309273735238244126224786530205309841241554100e+77,
        -2.3064858246307166204738030138103766616236470199051511300921739815190e+80,
        -5.5648121928700061582464391625164386860081156002157737088990604346560e+83,
        -1.4258747425358444009570638240678952414106824061428143662684567461640e+87,
        -3.8732895967824595508759346648192032120618162030750584346035466479860e+90,
        -1.1135923286968508441850331229673794325234269780229843580847122796070e+94,
        -3.3832949359638733345296896827515103441106509123369820515812386269470e+97,
        -1.0846187498103346877861073639932215030464972161028749862302896323670e+101,
        -3.6637675896351569613989314774169363221116993261202308931493480926110e+104,
        -1.3023068683764358850217284313843312241882676687996376761813939376260e+108,
        -4.8650038107772889723933269035595710492136466820336895421677762354480e+111,
        -1.9077172322290849802626455124991995446193522466030919121989161940300e+115,
        -7.8434494940022838542204878691135615680589924478607909220870915929650e+118,
        -3.3774340943788767024750346018657171672375785744278296573692058467690e+122,
        -1.5215955884734982790544475883850926084837078168255872870631652278060e+126,
        -7.1649004190192480023524589812450546706749489342612772092982680431290e+129,
        -3.5229331179784842655076831037707769835979262101176203206020619820250e+133,
        -1.8071088131997102426584141687123445370794488782743819670027768650070e+137]
    
    let d: Array<Double> = [
        1.0000000000000000000000000000000000000000000000000000000000000000000e+00,
        -2.1875000000000000000000000000000000000000000000000000000000000000000e-01,
        -2.3811848958333333333333333333333333333333333333333333333333333333330e-01,
        -1.5114471435546875000000000000000000000000000000000000000000000000000e+00,
        -2.4620345711708068847656250000000000000000000000000000000000000000000e+01,
        -7.6086294204038050439622667100694444444444444444444444444444444444440e+02,
        -3.8092128868188640229742635380138050426136363636363636363636363636360e+04,
        -2.8082562244080195275903231679246975825383112980769230769230769230770e+06,
        -2.8607946453262385636628692964222864247858524322509765625000000000000e+08,
        -3.8480790905747179385766298433031973967017085455796297858743106617650e+10,
        -6.6050619870875374085141895250268697180548303405980971690855528178970e+12,
        -1.4087107203786266895474229097071387064564936449547379500775908430420e+15,
        -3.6542984737250173263822582147634056560257268026887776125454859973850e+17,
        -1.1329639450011994200743048058647230246736432348623124181236088148240e+20,
        -4.1371744404875883016541729567285839631712496380598048629271123618470e+22,
        -1.7574349642737663059031534378525691263268308654379228784525651291710e+25,
        -8.5924160506996514557379617019132398803302175426817653569682851557100e+27,
        -4.7906551025465751515669729015000637241952562513029744187686495732900e+30,
        -3.0213269421511401499687820977552075015245020527256257041378966249360e+33,
        -2.1399970937320017557354494737300168515390960226867407271664411223300e+36,
        -1.6915031381769804103850733555848209612224387842573724614493225104370e+39,
        -1.4835311087410397492083286676216470036366696291606158301927652269280e+42,
        -1.4363173833472507948203636105983791470914532060599594653238608453020e+45,
        -1.5279550958145288037798152480016932257564787055599234667936240458810e+48,
        -1.7784267946552010527555830684846510215218772178165602333517334638230e+51,
        -2.2560262434454646323482238905021187368735965582739309243375596398990e+54,
        -3.1080758268011686600204807563047338098476704125999060010703485766130e+57,
        -4.6350816361828754091843816015741307407256970145816581103438065469270e+60,
        -7.4598303934675995061007145208437781401846859095965526853293166387510e+63,
        -1.2920824883839973738038478102778590132033803794125290485499782279180e+67,
        -2.4022123670554103535271126405427971447224944735511581081191319646570e+70,
        -4.7823342996246230871145477576426171365849607028316240761103920136300e+73,
        -1.0171687597738396277948309273735238244126224786530205309841241554100e+77,
        -2.3064858246307166204738030138103766616236470199051511300921739815190e+80,
        -5.5648121928700061582464391625164386860081156002157737088990604346560e+83,
        -1.4258747425358444009570638240678952414106824061428143662684567461640e+87,
        -3.8732895967824595508759346648192032120618162030750584346035466479860e+90,
        -1.1135923286968508441850331229673794325234269780229843580847122796070e+94,
        -3.3832949359638733345296896827515103441106509123369820515812386269470e+97,
        -1.0846187498103346877861073639932215030464972161028749862302896323670e+101,
        -3.6637675896351569613989314774169363221116993261202308931493480926110e+104,
        -1.3023068683764358850217284313843312241882676687996376761813939376260e+108,
        -4.8650038107772889723933269035595710492136466820336895421677762354480e+111,
        -1.9077172322290849802626455124991995446193522466030919121989161940300e+115,
        -7.8434494940022838542204878691135615680589924478607909220870915929650e+118,
        -3.3774340943788767024750346018657171672375785744278296573692058467690e+122,
        -1.5215955884734982790544475883850926084837078168255872870631652278060e+126,
        -7.1649004190192480023524589812450546706749489342612772092982680431290e+129,
        -3.5229331179784842655076831037707769835979262101176203206020619820250e+133,
        -1.8071088131997102426584141687123445370794488782743819670027768650070e+137]
    #if arch(i386) || arch(x86_64)
    
    let l: Array<Float80> = [
        1.0000000000000000000000000000000000000000000000000000000000000000000e+00,
        -2.1875000000000000000000000000000000000000000000000000000000000000000e-01,
        -2.3811848958333333333333333333333333333333333333333333333333333333330e-01,
        -1.5114471435546875000000000000000000000000000000000000000000000000000e+00,
        -2.4620345711708068847656250000000000000000000000000000000000000000000e+01,
        -7.6086294204038050439622667100694444444444444444444444444444444444440e+02,
        -3.8092128868188640229742635380138050426136363636363636363636363636360e+04,
        -2.8082562244080195275903231679246975825383112980769230769230769230770e+06,
        -2.8607946453262385636628692964222864247858524322509765625000000000000e+08,
        -3.8480790905747179385766298433031973967017085455796297858743106617650e+10,
        -6.6050619870875374085141895250268697180548303405980971690855528178970e+12,
        -1.4087107203786266895474229097071387064564936449547379500775908430420e+15,
        -3.6542984737250173263822582147634056560257268026887776125454859973850e+17,
        -1.1329639450011994200743048058647230246736432348623124181236088148240e+20,
        -4.1371744404875883016541729567285839631712496380598048629271123618470e+22,
        -1.7574349642737663059031534378525691263268308654379228784525651291710e+25,
        -8.5924160506996514557379617019132398803302175426817653569682851557100e+27,
        -4.7906551025465751515669729015000637241952562513029744187686495732900e+30,
        -3.0213269421511401499687820977552075015245020527256257041378966249360e+33,
        -2.1399970937320017557354494737300168515390960226867407271664411223300e+36,
        -1.6915031381769804103850733555848209612224387842573724614493225104370e+39,
        -1.4835311087410397492083286676216470036366696291606158301927652269280e+42,
        -1.4363173833472507948203636105983791470914532060599594653238608453020e+45,
        -1.5279550958145288037798152480016932257564787055599234667936240458810e+48,
        -1.7784267946552010527555830684846510215218772178165602333517334638230e+51,
        -2.2560262434454646323482238905021187368735965582739309243375596398990e+54,
        -3.1080758268011686600204807563047338098476704125999060010703485766130e+57,
        -4.6350816361828754091843816015741307407256970145816581103438065469270e+60,
        -7.4598303934675995061007145208437781401846859095965526853293166387510e+63,
        -1.2920824883839973738038478102778590132033803794125290485499782279180e+67,
        -2.4022123670554103535271126405427971447224944735511581081191319646570e+70,
        -4.7823342996246230871145477576426171365849607028316240761103920136300e+73,
        -1.0171687597738396277948309273735238244126224786530205309841241554100e+77,
        -2.3064858246307166204738030138103766616236470199051511300921739815190e+80,
        -5.5648121928700061582464391625164386860081156002157737088990604346560e+83,
        -1.4258747425358444009570638240678952414106824061428143662684567461640e+87,
        -3.8732895967824595508759346648192032120618162030750584346035466479860e+90,
        -1.1135923286968508441850331229673794325234269780229843580847122796070e+94,
        -3.3832949359638733345296896827515103441106509123369820515812386269470e+97,
        -1.0846187498103346877861073639932215030464972161028749862302896323670e+101,
        -3.6637675896351569613989314774169363221116993261202308931493480926110e+104,
        -1.3023068683764358850217284313843312241882676687996376761813939376260e+108,
        -4.8650038107772889723933269035595710492136466820336895421677762354480e+111,
        -1.9077172322290849802626455124991995446193522466030919121989161940300e+115,
        -7.8434494940022838542204878691135615680589924478607909220870915929650e+118,
        -3.3774340943788767024750346018657171672375785744278296573692058467690e+122,
        -1.5215955884734982790544475883850926084837078168255872870631652278060e+126,
        -7.1649004190192480023524589812450546706749489342612772092982680431290e+129,
        -3.5229331179784842655076831037707769835979262101176203206020619820250e+133,
        -1.8071088131997102426584141687123445370794488782743819670027768650070e+137]
    #endif
    switch T.self {
    case is Float.Type:
        let result = f as Array<Float>
        return result as! Array<T>
    case is Double.Type:
        let result = d as Array<Double>
        return result as! Array<T>
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = l as Array<Float80>
        return result as! Array<T>
        #endif
    default:
        let result = d as Array<Double>
        return result as! Array<T>
    }
}

*/
